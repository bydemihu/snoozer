/**
    * @license
    * Copyright 2023 Google LLC. All Rights Reserved.
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * =============================================================================
    */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@mediapipe/face_mesh'), require('@tensorflow/tfjs-core'), require('@tensorflow/tfjs-converter')) :
    typeof define === 'function' && define.amd ? define(['exports', '@mediapipe/face_mesh', '@tensorflow/tfjs-core', '@tensorflow/tfjs-converter'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.faceLandmarksDetection = {}, global.globalThis, global.tf, global.tf));
})(this, (function (exports, faceMesh, tf, tfconv) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var faceMesh__namespace = /*#__PURE__*/_interopNamespace(faceMesh);
    var tf__namespace = /*#__PURE__*/_interopNamespace(tf);
    var tfconv__namespace = /*#__PURE__*/_interopNamespace(tfconv);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function connectionsToIndices(connections) {
        var indices = connections.map(function (connection) { return connection[0]; });
        indices.push(connections[connections.length - 1][1]);
        return indices;
    }
    // ref:
    // https://github.com/google/mediapipe/mediapipe/python/solutions/face_mesh_connections.py
    var LIPS_CONNECTIONS = [
        [61, 146], [146, 91], [91, 181], [181, 84], [84, 17], [17, 314],
        [314, 405], [405, 321], [321, 375], [375, 291], [61, 185], [185, 40],
        [40, 39], [39, 37], [37, 0], [0, 267], [267, 269], [269, 270],
        [270, 409], [409, 291], [78, 95], [95, 88], [88, 178], [178, 87],
        [87, 14], [14, 317], [317, 402], [402, 318], [318, 324], [324, 308],
        [78, 191], [191, 80], [80, 81], [81, 82], [82, 13], [13, 312],
        [312, 311], [311, 310], [310, 415], [415, 308],
    ];
    var LEFT_EYE_CONNECTIONS = [
        [263, 249],
        [249, 390],
        [390, 373],
        [373, 374],
        [374, 380],
        [380, 381],
        [381, 382],
        [382, 362],
        [263, 466],
        [466, 388],
        [388, 387],
        [387, 386],
        [386, 385],
        [385, 384],
        [384, 398],
        [398, 362],
    ];
    var LEFT_EYEBROW_CONNECTIONS = [
        [276, 283],
        [283, 282],
        [282, 295],
        [295, 285],
        [300, 293],
        [293, 334],
        [334, 296],
        [296, 336],
    ];
    var LEFT_IRIS_CONNECTIONS = [
        [474, 475],
        [475, 476],
        [476, 477],
        [477, 474],
    ];
    var RIGHT_EYE_CONNECTIONS = [
        [33, 7],
        [7, 163],
        [163, 144],
        [144, 145],
        [145, 153],
        [153, 154],
        [154, 155],
        [155, 133],
        [33, 246],
        [246, 161],
        [161, 160],
        [160, 159],
        [159, 158],
        [158, 157],
        [157, 173],
        [173, 133],
    ];
    var RIGHT_EYEBROW_CONNECTIONS = [
        [46, 53],
        [53, 52],
        [52, 65],
        [65, 55],
        [70, 63],
        [63, 105],
        [105, 66],
        [66, 107],
    ];
    var RIGHT_IRIS_CONNECTIONS = [
        [469, 470],
        [470, 471],
        [471, 472],
        [472, 469],
    ];
    var FACE_OVAL_CONNECTIONS = [
        [10, 338], [338, 297], [297, 332], [332, 284], [284, 251], [251, 389],
        [389, 356], [356, 454], [454, 323], [323, 361], [361, 288], [288, 397],
        [397, 365], [365, 379], [379, 378], [378, 400], [400, 377], [377, 152],
        [152, 148], [148, 176], [176, 149], [149, 150], [150, 136], [136, 172],
        [172, 58], [58, 132], [132, 93], [93, 234], [234, 127], [127, 162],
        [162, 21], [21, 54], [54, 103], [103, 67], [67, 109], [109, 10]
    ];
    var MEDIAPIPE_FACE_MESH_KEYPOINTS_BY_CONTOUR = {
        lips: connectionsToIndices(LIPS_CONNECTIONS),
        leftEye: connectionsToIndices(LEFT_EYE_CONNECTIONS),
        leftEyebrow: connectionsToIndices(LEFT_EYEBROW_CONNECTIONS),
        leftIris: connectionsToIndices(LEFT_IRIS_CONNECTIONS),
        rightEye: connectionsToIndices(RIGHT_EYE_CONNECTIONS),
        rightEyebrow: connectionsToIndices(RIGHT_EYEBROW_CONNECTIONS),
        rightIris: connectionsToIndices(RIGHT_IRIS_CONNECTIONS),
        faceOval: connectionsToIndices(FACE_OVAL_CONNECTIONS),
    };
    var MEDIAPIPE_FACE_MESH_CONNECTED_KEYPOINTS_PAIRS = [
        [127, 34], [34, 139], [139, 127], [11, 0], [0, 37], [37, 11],
        [232, 231], [231, 120], [120, 232], [72, 37], [37, 39], [39, 72],
        [128, 121], [121, 47], [47, 128], [232, 121], [121, 128], [128, 232],
        [104, 69], [69, 67], [67, 104], [175, 171], [171, 148], [148, 175],
        [118, 50], [50, 101], [101, 118], [73, 39], [39, 40], [40, 73],
        [9, 151], [151, 108], [108, 9], [48, 115], [115, 131], [131, 48],
        [194, 204], [204, 211], [211, 194], [74, 40], [40, 185], [185, 74],
        [80, 42], [42, 183], [183, 80], [40, 92], [92, 186], [186, 40],
        [230, 229], [229, 118], [118, 230], [202, 212], [212, 214], [214, 202],
        [83, 18], [18, 17], [17, 83], [76, 61], [61, 146], [146, 76],
        [160, 29], [29, 30], [30, 160], [56, 157], [157, 173], [173, 56],
        [106, 204], [204, 194], [194, 106], [135, 214], [214, 192], [192, 135],
        [203, 165], [165, 98], [98, 203], [21, 71], [71, 68], [68, 21],
        [51, 45], [45, 4], [4, 51], [144, 24], [24, 23], [23, 144],
        [77, 146], [146, 91], [91, 77], [205, 50], [50, 187], [187, 205],
        [201, 200], [200, 18], [18, 201], [91, 106], [106, 182], [182, 91],
        [90, 91], [91, 181], [181, 90], [85, 84], [84, 17], [17, 85],
        [206, 203], [203, 36], [36, 206], [148, 171], [171, 140], [140, 148],
        [92, 40], [40, 39], [39, 92], [193, 189], [189, 244], [244, 193],
        [159, 158], [158, 28], [28, 159], [247, 246], [246, 161], [161, 247],
        [236, 3], [3, 196], [196, 236], [54, 68], [68, 104], [104, 54],
        [193, 168], [168, 8], [8, 193], [117, 228], [228, 31], [31, 117],
        [189, 193], [193, 55], [55, 189], [98, 97], [97, 99], [99, 98],
        [126, 47], [47, 100], [100, 126], [166, 79], [79, 218], [218, 166],
        [155, 154], [154, 26], [26, 155], [209, 49], [49, 131], [131, 209],
        [135, 136], [136, 150], [150, 135], [47, 126], [126, 217], [217, 47],
        [223, 52], [52, 53], [53, 223], [45, 51], [51, 134], [134, 45],
        [211, 170], [170, 140], [140, 211], [67, 69], [69, 108], [108, 67],
        [43, 106], [106, 91], [91, 43], [230, 119], [119, 120], [120, 230],
        [226, 130], [130, 247], [247, 226], [63, 53], [53, 52], [52, 63],
        [238, 20], [20, 242], [242, 238], [46, 70], [70, 156], [156, 46],
        [78, 62], [62, 96], [96, 78], [46, 53], [53, 63], [63, 46],
        [143, 34], [34, 227], [227, 143], [123, 117], [117, 111], [111, 123],
        [44, 125], [125, 19], [19, 44], [236, 134], [134, 51], [51, 236],
        [216, 206], [206, 205], [205, 216], [154, 153], [153, 22], [22, 154],
        [39, 37], [37, 167], [167, 39], [200, 201], [201, 208], [208, 200],
        [36, 142], [142, 100], [100, 36], [57, 212], [212, 202], [202, 57],
        [20, 60], [60, 99], [99, 20], [28, 158], [158, 157], [157, 28],
        [35, 226], [226, 113], [113, 35], [160, 159], [159, 27], [27, 160],
        [204, 202], [202, 210], [210, 204], [113, 225], [225, 46], [46, 113],
        [43, 202], [202, 204], [204, 43], [62, 76], [76, 77], [77, 62],
        [137, 123], [123, 116], [116, 137], [41, 38], [38, 72], [72, 41],
        [203, 129], [129, 142], [142, 203], [64, 98], [98, 240], [240, 64],
        [49, 102], [102, 64], [64, 49], [41, 73], [73, 74], [74, 41],
        [212, 216], [216, 207], [207, 212], [42, 74], [74, 184], [184, 42],
        [169, 170], [170, 211], [211, 169], [170, 149], [149, 176], [176, 170],
        [105, 66], [66, 69], [69, 105], [122, 6], [6, 168], [168, 122],
        [123, 147], [147, 187], [187, 123], [96, 77], [77, 90], [90, 96],
        [65, 55], [55, 107], [107, 65], [89, 90], [90, 180], [180, 89],
        [101, 100], [100, 120], [120, 101], [63, 105], [105, 104], [104, 63],
        [93, 137], [137, 227], [227, 93], [15, 86], [86, 85], [85, 15],
        [129, 102], [102, 49], [49, 129], [14, 87], [87, 86], [86, 14],
        [55, 8], [8, 9], [9, 55], [100, 47], [47, 121], [121, 100],
        [145, 23], [23, 22], [22, 145], [88, 89], [89, 179], [179, 88],
        [6, 122], [122, 196], [196, 6], [88, 95], [95, 96], [96, 88],
        [138, 172], [172, 136], [136, 138], [215, 58], [58, 172], [172, 215],
        [115, 48], [48, 219], [219, 115], [42, 80], [80, 81], [81, 42],
        [195, 3], [3, 51], [51, 195], [43, 146], [146, 61], [61, 43],
        [171, 175], [175, 199], [199, 171], [81, 82], [82, 38], [38, 81],
        [53, 46], [46, 225], [225, 53], [144, 163], [163, 110], [110, 144],
        [52, 65], [65, 66], [66, 52], [229, 228], [228, 117], [117, 229],
        [34, 127], [127, 234], [234, 34], [107, 108], [108, 69], [69, 107],
        [109, 108], [108, 151], [151, 109], [48, 64], [64, 235], [235, 48],
        [62, 78], [78, 191], [191, 62], [129, 209], [209, 126], [126, 129],
        [111, 35], [35, 143], [143, 111], [117, 123], [123, 50], [50, 117],
        [222, 65], [65, 52], [52, 222], [19, 125], [125, 141], [141, 19],
        [221, 55], [55, 65], [65, 221], [3, 195], [195, 197], [197, 3],
        [25, 7], [7, 33], [33, 25], [220, 237], [237, 44], [44, 220],
        [70, 71], [71, 139], [139, 70], [122, 193], [193, 245], [245, 122],
        [247, 130], [130, 33], [33, 247], [71, 21], [21, 162], [162, 71],
        [170, 169], [169, 150], [150, 170], [188, 174], [174, 196], [196, 188],
        [216, 186], [186, 92], [92, 216], [2, 97], [97, 167], [167, 2],
        [141, 125], [125, 241], [241, 141], [164, 167], [167, 37], [37, 164],
        [72, 38], [38, 12], [12, 72], [38, 82], [82, 13], [13, 38],
        [63, 68], [68, 71], [71, 63], [226, 35], [35, 111], [111, 226],
        [101, 50], [50, 205], [205, 101], [206, 92], [92, 165], [165, 206],
        [209, 198], [198, 217], [217, 209], [165, 167], [167, 97], [97, 165],
        [220, 115], [115, 218], [218, 220], [133, 112], [112, 243], [243, 133],
        [239, 238], [238, 241], [241, 239], [214, 135], [135, 169], [169, 214],
        [190, 173], [173, 133], [133, 190], [171, 208], [208, 32], [32, 171],
        [125, 44], [44, 237], [237, 125], [86, 87], [87, 178], [178, 86],
        [85, 86], [86, 179], [179, 85], [84, 85], [85, 180], [180, 84],
        [83, 84], [84, 181], [181, 83], [201, 83], [83, 182], [182, 201],
        [137, 93], [93, 132], [132, 137], [76, 62], [62, 183], [183, 76],
        [61, 76], [76, 184], [184, 61], [57, 61], [61, 185], [185, 57],
        [212, 57], [57, 186], [186, 212], [214, 207], [207, 187], [187, 214],
        [34, 143], [143, 156], [156, 34], [79, 239], [239, 237], [237, 79],
        [123, 137], [137, 177], [177, 123], [44, 1], [1, 4], [4, 44],
        [201, 194], [194, 32], [32, 201], [64, 102], [102, 129], [129, 64],
        [213, 215], [215, 138], [138, 213], [59, 166], [166, 219], [219, 59],
        [242, 99], [99, 97], [97, 242], [2, 94], [94, 141], [141, 2],
        [75, 59], [59, 235], [235, 75], [24, 110], [110, 228], [228, 24],
        [25, 130], [130, 226], [226, 25], [23, 24], [24, 229], [229, 23],
        [22, 23], [23, 230], [230, 22], [26, 22], [22, 231], [231, 26],
        [112, 26], [26, 232], [232, 112], [189, 190], [190, 243], [243, 189],
        [221, 56], [56, 190], [190, 221], [28, 56], [56, 221], [221, 28],
        [27, 28], [28, 222], [222, 27], [29, 27], [27, 223], [223, 29],
        [30, 29], [29, 224], [224, 30], [247, 30], [30, 225], [225, 247],
        [238, 79], [79, 20], [20, 238], [166, 59], [59, 75], [75, 166],
        [60, 75], [75, 240], [240, 60], [147, 177], [177, 215], [215, 147],
        [20, 79], [79, 166], [166, 20], [187, 147], [147, 213], [213, 187],
        [112, 233], [233, 244], [244, 112], [233, 128], [128, 245], [245, 233],
        [128, 114], [114, 188], [188, 128], [114, 217], [217, 174], [174, 114],
        [131, 115], [115, 220], [220, 131], [217, 198], [198, 236], [236, 217],
        [198, 131], [131, 134], [134, 198], [177, 132], [132, 58], [58, 177],
        [143, 35], [35, 124], [124, 143], [110, 163], [163, 7], [7, 110],
        [228, 110], [110, 25], [25, 228], [356, 389], [389, 368], [368, 356],
        [11, 302], [302, 267], [267, 11], [452, 350], [350, 349], [349, 452],
        [302, 303], [303, 269], [269, 302], [357, 343], [343, 277], [277, 357],
        [452, 453], [453, 357], [357, 452], [333, 332], [332, 297], [297, 333],
        [175, 152], [152, 377], [377, 175], [347, 348], [348, 330], [330, 347],
        [303, 304], [304, 270], [270, 303], [9, 336], [336, 337], [337, 9],
        [278, 279], [279, 360], [360, 278], [418, 262], [262, 431], [431, 418],
        [304, 408], [408, 409], [409, 304], [310, 415], [415, 407], [407, 310],
        [270, 409], [409, 410], [410, 270], [450, 348], [348, 347], [347, 450],
        [422, 430], [430, 434], [434, 422], [313, 314], [314, 17], [17, 313],
        [306, 307], [307, 375], [375, 306], [387, 388], [388, 260], [260, 387],
        [286, 414], [414, 398], [398, 286], [335, 406], [406, 418], [418, 335],
        [364, 367], [367, 416], [416, 364], [423, 358], [358, 327], [327, 423],
        [251, 284], [284, 298], [298, 251], [281, 5], [5, 4], [4, 281],
        [373, 374], [374, 253], [253, 373], [307, 320], [320, 321], [321, 307],
        [425, 427], [427, 411], [411, 425], [421, 313], [313, 18], [18, 421],
        [321, 405], [405, 406], [406, 321], [320, 404], [404, 405], [405, 320],
        [315, 16], [16, 17], [17, 315], [426, 425], [425, 266], [266, 426],
        [377, 400], [400, 369], [369, 377], [322, 391], [391, 269], [269, 322],
        [417, 465], [465, 464], [464, 417], [386, 257], [257, 258], [258, 386],
        [466, 260], [260, 388], [388, 466], [456, 399], [399, 419], [419, 456],
        [284, 332], [332, 333], [333, 284], [417, 285], [285, 8], [8, 417],
        [346, 340], [340, 261], [261, 346], [413, 441], [441, 285], [285, 413],
        [327, 460], [460, 328], [328, 327], [355, 371], [371, 329], [329, 355],
        [392, 439], [439, 438], [438, 392], [382, 341], [341, 256], [256, 382],
        [429, 420], [420, 360], [360, 429], [364, 394], [394, 379], [379, 364],
        [277, 343], [343, 437], [437, 277], [443, 444], [444, 283], [283, 443],
        [275, 440], [440, 363], [363, 275], [431, 262], [262, 369], [369, 431],
        [297, 338], [338, 337], [337, 297], [273, 375], [375, 321], [321, 273],
        [450, 451], [451, 349], [349, 450], [446, 342], [342, 467], [467, 446],
        [293, 334], [334, 282], [282, 293], [458, 461], [461, 462], [462, 458],
        [276, 353], [353, 383], [383, 276], [308, 324], [324, 325], [325, 308],
        [276, 300], [300, 293], [293, 276], [372, 345], [345, 447], [447, 372],
        [352, 345], [345, 340], [340, 352], [274, 1], [1, 19], [19, 274],
        [456, 248], [248, 281], [281, 456], [436, 427], [427, 425], [425, 436],
        [381, 256], [256, 252], [252, 381], [269, 391], [391, 393], [393, 269],
        [200, 199], [199, 428], [428, 200], [266, 330], [330, 329], [329, 266],
        [287, 273], [273, 422], [422, 287], [250, 462], [462, 328], [328, 250],
        [258, 286], [286, 384], [384, 258], [265, 353], [353, 342], [342, 265],
        [387, 259], [259, 257], [257, 387], [424, 431], [431, 430], [430, 424],
        [342, 353], [353, 276], [276, 342], [273, 335], [335, 424], [424, 273],
        [292, 325], [325, 307], [307, 292], [366, 447], [447, 345], [345, 366],
        [271, 303], [303, 302], [302, 271], [423, 266], [266, 371], [371, 423],
        [294, 455], [455, 460], [460, 294], [279, 278], [278, 294], [294, 279],
        [271, 272], [272, 304], [304, 271], [432, 434], [434, 427], [427, 432],
        [272, 407], [407, 408], [408, 272], [394, 430], [430, 431], [431, 394],
        [395, 369], [369, 400], [400, 395], [334, 333], [333, 299], [299, 334],
        [351, 417], [417, 168], [168, 351], [352, 280], [280, 411], [411, 352],
        [325, 319], [319, 320], [320, 325], [295, 296], [296, 336], [336, 295],
        [319, 403], [403, 404], [404, 319], [330, 348], [348, 349], [349, 330],
        [293, 298], [298, 333], [333, 293], [323, 454], [454, 447], [447, 323],
        [15, 16], [16, 315], [315, 15], [358, 429], [429, 279], [279, 358],
        [14, 15], [15, 316], [316, 14], [285, 336], [336, 9], [9, 285],
        [329, 349], [349, 350], [350, 329], [374, 380], [380, 252], [252, 374],
        [318, 402], [402, 403], [403, 318], [6, 197], [197, 419], [419, 6],
        [318, 319], [319, 325], [325, 318], [367, 364], [364, 365], [365, 367],
        [435, 367], [367, 397], [397, 435], [344, 438], [438, 439], [439, 344],
        [272, 271], [271, 311], [311, 272], [195, 5], [5, 281], [281, 195],
        [273, 287], [287, 291], [291, 273], [396, 428], [428, 199], [199, 396],
        [311, 271], [271, 268], [268, 311], [283, 444], [444, 445], [445, 283],
        [373, 254], [254, 339], [339, 373], [282, 334], [334, 296], [296, 282],
        [449, 347], [347, 346], [346, 449], [264, 447], [447, 454], [454, 264],
        [336, 296], [296, 299], [299, 336], [338, 10], [10, 151], [151, 338],
        [278, 439], [439, 455], [455, 278], [292, 407], [407, 415], [415, 292],
        [358, 371], [371, 355], [355, 358], [340, 345], [345, 372], [372, 340],
        [346, 347], [347, 280], [280, 346], [442, 443], [443, 282], [282, 442],
        [19, 94], [94, 370], [370, 19], [441, 442], [442, 295], [295, 441],
        [248, 419], [419, 197], [197, 248], [263, 255], [255, 359], [359, 263],
        [440, 275], [275, 274], [274, 440], [300, 383], [383, 368], [368, 300],
        [351, 412], [412, 465], [465, 351], [263, 467], [467, 466], [466, 263],
        [301, 368], [368, 389], [389, 301], [395, 378], [378, 379], [379, 395],
        [412, 351], [351, 419], [419, 412], [436, 426], [426, 322], [322, 436],
        [2, 164], [164, 393], [393, 2], [370, 462], [462, 461], [461, 370],
        [164, 0], [0, 267], [267, 164], [302, 11], [11, 12], [12, 302],
        [268, 12], [12, 13], [13, 268], [293, 300], [300, 301], [301, 293],
        [446, 261], [261, 340], [340, 446], [330, 266], [266, 425], [425, 330],
        [426, 423], [423, 391], [391, 426], [429, 355], [355, 437], [437, 429],
        [391, 327], [327, 326], [326, 391], [440, 457], [457, 438], [438, 440],
        [341, 382], [382, 362], [362, 341], [459, 457], [457, 461], [461, 459],
        [434, 430], [430, 394], [394, 434], [414, 463], [463, 362], [362, 414],
        [396, 369], [369, 262], [262, 396], [354, 461], [461, 457], [457, 354],
        [316, 403], [403, 402], [402, 316], [315, 404], [404, 403], [403, 315],
        [314, 405], [405, 404], [404, 314], [313, 406], [406, 405], [405, 313],
        [421, 418], [418, 406], [406, 421], [366, 401], [401, 361], [361, 366],
        [306, 408], [408, 407], [407, 306], [291, 409], [409, 408], [408, 291],
        [287, 410], [410, 409], [409, 287], [432, 436], [436, 410], [410, 432],
        [434, 416], [416, 411], [411, 434], [264, 368], [368, 383], [383, 264],
        [309, 438], [438, 457], [457, 309], [352, 376], [376, 401], [401, 352],
        [274, 275], [275, 4], [4, 274], [421, 428], [428, 262], [262, 421],
        [294, 327], [327, 358], [358, 294], [433, 416], [416, 367], [367, 433],
        [289, 455], [455, 439], [439, 289], [462, 370], [370, 326], [326, 462],
        [2, 326], [326, 370], [370, 2], [305, 460], [460, 455], [455, 305],
        [254, 449], [449, 448], [448, 254], [255, 261], [261, 446], [446, 255],
        [253, 450], [450, 449], [449, 253], [252, 451], [451, 450], [450, 252],
        [256, 452], [452, 451], [451, 256], [341, 453], [453, 452], [452, 341],
        [413, 464], [464, 463], [463, 413], [441, 413], [413, 414], [414, 441],
        [258, 442], [442, 441], [441, 258], [257, 443], [443, 442], [442, 257],
        [259, 444], [444, 443], [443, 259], [260, 445], [445, 444], [444, 260],
        [467, 342], [342, 445], [445, 467], [459, 458], [458, 250], [250, 459],
        [289, 392], [392, 290], [290, 289], [290, 328], [328, 460], [460, 290],
        [376, 433], [433, 435], [435, 376], [250, 290], [290, 392], [392, 250],
        [411, 416], [416, 433], [433, 411], [341, 463], [463, 464], [464, 341],
        [453, 464], [464, 465], [465, 453], [357, 465], [465, 412], [412, 357],
        [343, 412], [412, 399], [399, 343], [360, 363], [363, 440], [440, 360],
        [437, 399], [399, 456], [456, 437], [420, 456], [456, 363], [363, 420],
        [401, 435], [435, 288], [288, 401], [372, 383], [383, 353], [353, 372],
        [339, 255], [255, 249], [249, 339], [448, 261], [261, 255], [255, 448],
        [133, 243], [243, 190], [190, 133], [133, 155], [155, 112], [112, 133],
        [33, 246], [246, 247], [247, 33], [33, 130], [130, 25], [25, 33],
        [398, 384], [384, 286], [286, 398], [362, 398], [398, 414], [414, 362],
        [362, 463], [463, 341], [341, 362], [263, 359], [359, 467], [467, 263],
        [263, 249], [249, 255], [255, 263], [466, 467], [467, 260], [260, 466],
        [75, 60], [60, 166], [166, 75], [238, 239], [239, 79], [79, 238],
        [162, 127], [127, 139], [139, 162], [72, 11], [11, 37], [37, 72],
        [121, 232], [232, 120], [120, 121], [73, 72], [72, 39], [39, 73],
        [114, 128], [128, 47], [47, 114], [233, 232], [232, 128], [128, 233],
        [103, 104], [104, 67], [67, 103], [152, 175], [175, 148], [148, 152],
        [119, 118], [118, 101], [101, 119], [74, 73], [73, 40], [40, 74],
        [107, 9], [9, 108], [108, 107], [49, 48], [48, 131], [131, 49],
        [32, 194], [194, 211], [211, 32], [184, 74], [74, 185], [185, 184],
        [191, 80], [80, 183], [183, 191], [185, 40], [40, 186], [186, 185],
        [119, 230], [230, 118], [118, 119], [210, 202], [202, 214], [214, 210],
        [84, 83], [83, 17], [17, 84], [77, 76], [76, 146], [146, 77],
        [161, 160], [160, 30], [30, 161], [190, 56], [56, 173], [173, 190],
        [182, 106], [106, 194], [194, 182], [138, 135], [135, 192], [192, 138],
        [129, 203], [203, 98], [98, 129], [54, 21], [21, 68], [68, 54],
        [5, 51], [51, 4], [4, 5], [145, 144], [144, 23], [23, 145],
        [90, 77], [77, 91], [91, 90], [207, 205], [205, 187], [187, 207],
        [83, 201], [201, 18], [18, 83], [181, 91], [91, 182], [182, 181],
        [180, 90], [90, 181], [181, 180], [16, 85], [85, 17], [17, 16],
        [205, 206], [206, 36], [36, 205], [176, 148], [148, 140], [140, 176],
        [165, 92], [92, 39], [39, 165], [245, 193], [193, 244], [244, 245],
        [27, 159], [159, 28], [28, 27], [30, 247], [247, 161], [161, 30],
        [174, 236], [236, 196], [196, 174], [103, 54], [54, 104], [104, 103],
        [55, 193], [193, 8], [8, 55], [111, 117], [117, 31], [31, 111],
        [221, 189], [189, 55], [55, 221], [240, 98], [98, 99], [99, 240],
        [142, 126], [126, 100], [100, 142], [219, 166], [166, 218], [218, 219],
        [112, 155], [155, 26], [26, 112], [198, 209], [209, 131], [131, 198],
        [169, 135], [135, 150], [150, 169], [114, 47], [47, 217], [217, 114],
        [224, 223], [223, 53], [53, 224], [220, 45], [45, 134], [134, 220],
        [32, 211], [211, 140], [140, 32], [109, 67], [67, 108], [108, 109],
        [146, 43], [43, 91], [91, 146], [231, 230], [230, 120], [120, 231],
        [113, 226], [226, 247], [247, 113], [105, 63], [63, 52], [52, 105],
        [241, 238], [238, 242], [242, 241], [124, 46], [46, 156], [156, 124],
        [95, 78], [78, 96], [96, 95], [70, 46], [46, 63], [63, 70],
        [116, 143], [143, 227], [227, 116], [116, 123], [123, 111], [111, 116],
        [1, 44], [44, 19], [19, 1], [3, 236], [236, 51], [51, 3],
        [207, 216], [216, 205], [205, 207], [26, 154], [154, 22], [22, 26],
        [165, 39], [39, 167], [167, 165], [199, 200], [200, 208], [208, 199],
        [101, 36], [36, 100], [100, 101], [43, 57], [57, 202], [202, 43],
        [242, 20], [20, 99], [99, 242], [56, 28], [28, 157], [157, 56],
        [124, 35], [35, 113], [113, 124], [29, 160], [160, 27], [27, 29],
        [211, 204], [204, 210], [210, 211], [124, 113], [113, 46], [46, 124],
        [106, 43], [43, 204], [204, 106], [96, 62], [62, 77], [77, 96],
        [227, 137], [137, 116], [116, 227], [73, 41], [41, 72], [72, 73],
        [36, 203], [203, 142], [142, 36], [235, 64], [64, 240], [240, 235],
        [48, 49], [49, 64], [64, 48], [42, 41], [41, 74], [74, 42],
        [214, 212], [212, 207], [207, 214], [183, 42], [42, 184], [184, 183],
        [210, 169], [169, 211], [211, 210], [140, 170], [170, 176], [176, 140],
        [104, 105], [105, 69], [69, 104], [193, 122], [122, 168], [168, 193],
        [50, 123], [123, 187], [187, 50], [89, 96], [96, 90], [90, 89],
        [66, 65], [65, 107], [107, 66], [179, 89], [89, 180], [180, 179],
        [119, 101], [101, 120], [120, 119], [68, 63], [63, 104], [104, 68],
        [234, 93], [93, 227], [227, 234], [16, 15], [15, 85], [85, 16],
        [209, 129], [129, 49], [49, 209], [15, 14], [14, 86], [86, 15],
        [107, 55], [55, 9], [9, 107], [120, 100], [100, 121], [121, 120],
        [153, 145], [145, 22], [22, 153], [178, 88], [88, 179], [179, 178],
        [197, 6], [6, 196], [196, 197], [89, 88], [88, 96], [96, 89],
        [135, 138], [138, 136], [136, 135], [138, 215], [215, 172], [172, 138],
        [218, 115], [115, 219], [219, 218], [41, 42], [42, 81], [81, 41],
        [5, 195], [195, 51], [51, 5], [57, 43], [43, 61], [61, 57],
        [208, 171], [171, 199], [199, 208], [41, 81], [81, 38], [38, 41],
        [224, 53], [53, 225], [225, 224], [24, 144], [144, 110], [110, 24],
        [105, 52], [52, 66], [66, 105], [118, 229], [229, 117], [117, 118],
        [227, 34], [34, 234], [234, 227], [66, 107], [107, 69], [69, 66],
        [10, 109], [109, 151], [151, 10], [219, 48], [48, 235], [235, 219],
        [183, 62], [62, 191], [191, 183], [142, 129], [129, 126], [126, 142],
        [116, 111], [111, 143], [143, 116], [118, 117], [117, 50], [50, 118],
        [223, 222], [222, 52], [52, 223], [94, 19], [19, 141], [141, 94],
        [222, 221], [221, 65], [65, 222], [196, 3], [3, 197], [197, 196],
        [45, 220], [220, 44], [44, 45], [156, 70], [70, 139], [139, 156],
        [188, 122], [122, 245], [245, 188], [139, 71], [71, 162], [162, 139],
        [149, 170], [170, 150], [150, 149], [122, 188], [188, 196], [196, 122],
        [206, 216], [216, 92], [92, 206], [164, 2], [2, 167], [167, 164],
        [242, 141], [141, 241], [241, 242], [0, 164], [164, 37], [37, 0],
        [11, 72], [72, 12], [12, 11], [12, 38], [38, 13], [13, 12],
        [70, 63], [63, 71], [71, 70], [31, 226], [226, 111], [111, 31],
        [36, 101], [101, 205], [205, 36], [203, 206], [206, 165], [165, 203],
        [126, 209], [209, 217], [217, 126], [98, 165], [165, 97], [97, 98],
        [237, 220], [220, 218], [218, 237], [237, 239], [239, 241], [241, 237],
        [210, 214], [214, 169], [169, 210], [140, 171], [171, 32], [32, 140],
        [241, 125], [125, 237], [237, 241], [179, 86], [86, 178], [178, 179],
        [180, 85], [85, 179], [179, 180], [181, 84], [84, 180], [180, 181],
        [182, 83], [83, 181], [181, 182], [194, 201], [201, 182], [182, 194],
        [177, 137], [137, 132], [132, 177], [184, 76], [76, 183], [183, 184],
        [185, 61], [61, 184], [184, 185], [186, 57], [57, 185], [185, 186],
        [216, 212], [212, 186], [186, 216], [192, 214], [214, 187], [187, 192],
        [139, 34], [34, 156], [156, 139], [218, 79], [79, 237], [237, 218],
        [147, 123], [123, 177], [177, 147], [45, 44], [44, 4], [4, 45],
        [208, 201], [201, 32], [32, 208], [98, 64], [64, 129], [129, 98],
        [192, 213], [213, 138], [138, 192], [235, 59], [59, 219], [219, 235],
        [141, 242], [242, 97], [97, 141], [97, 2], [2, 141], [141, 97],
        [240, 75], [75, 235], [235, 240], [229, 24], [24, 228], [228, 229],
        [31, 25], [25, 226], [226, 31], [230, 23], [23, 229], [229, 230],
        [231, 22], [22, 230], [230, 231], [232, 26], [26, 231], [231, 232],
        [233, 112], [112, 232], [232, 233], [244, 189], [189, 243], [243, 244],
        [189, 221], [221, 190], [190, 189], [222, 28], [28, 221], [221, 222],
        [223, 27], [27, 222], [222, 223], [224, 29], [29, 223], [223, 224],
        [225, 30], [30, 224], [224, 225], [113, 247], [247, 225], [225, 113],
        [99, 60], [60, 240], [240, 99], [213, 147], [147, 215], [215, 213],
        [60, 20], [20, 166], [166, 60], [192, 187], [187, 213], [213, 192],
        [243, 112], [112, 244], [244, 243], [244, 233], [233, 245], [245, 244],
        [245, 128], [128, 188], [188, 245], [188, 114], [114, 174], [174, 188],
        [134, 131], [131, 220], [220, 134], [174, 217], [217, 236], [236, 174],
        [236, 198], [198, 134], [134, 236], [215, 177], [177, 58], [58, 215],
        [156, 143], [143, 124], [124, 156], [25, 110], [110, 7], [7, 25],
        [31, 228], [228, 25], [25, 31], [264, 356], [356, 368], [368, 264],
        [0, 11], [11, 267], [267, 0], [451, 452], [452, 349], [349, 451],
        [267, 302], [302, 269], [269, 267], [350, 357], [357, 277], [277, 350],
        [350, 452], [452, 357], [357, 350], [299, 333], [333, 297], [297, 299],
        [396, 175], [175, 377], [377, 396], [280, 347], [347, 330], [330, 280],
        [269, 303], [303, 270], [270, 269], [151, 9], [9, 337], [337, 151],
        [344, 278], [278, 360], [360, 344], [424, 418], [418, 431], [431, 424],
        [270, 304], [304, 409], [409, 270], [272, 310], [310, 407], [407, 272],
        [322, 270], [270, 410], [410, 322], [449, 450], [450, 347], [347, 449],
        [432, 422], [422, 434], [434, 432], [18, 313], [313, 17], [17, 18],
        [291, 306], [306, 375], [375, 291], [259, 387], [387, 260], [260, 259],
        [424, 335], [335, 418], [418, 424], [434, 364], [364, 416], [416, 434],
        [391, 423], [423, 327], [327, 391], [301, 251], [251, 298], [298, 301],
        [275, 281], [281, 4], [4, 275], [254, 373], [373, 253], [253, 254],
        [375, 307], [307, 321], [321, 375], [280, 425], [425, 411], [411, 280],
        [200, 421], [421, 18], [18, 200], [335, 321], [321, 406], [406, 335],
        [321, 320], [320, 405], [405, 321], [314, 315], [315, 17], [17, 314],
        [423, 426], [426, 266], [266, 423], [396, 377], [377, 369], [369, 396],
        [270, 322], [322, 269], [269, 270], [413, 417], [417, 464], [464, 413],
        [385, 386], [386, 258], [258, 385], [248, 456], [456, 419], [419, 248],
        [298, 284], [284, 333], [333, 298], [168, 417], [417, 8], [8, 168],
        [448, 346], [346, 261], [261, 448], [417, 413], [413, 285], [285, 417],
        [326, 327], [327, 328], [328, 326], [277, 355], [355, 329], [329, 277],
        [309, 392], [392, 438], [438, 309], [381, 382], [382, 256], [256, 381],
        [279, 429], [429, 360], [360, 279], [365, 364], [364, 379], [379, 365],
        [355, 277], [277, 437], [437, 355], [282, 443], [443, 283], [283, 282],
        [281, 275], [275, 363], [363, 281], [395, 431], [431, 369], [369, 395],
        [299, 297], [297, 337], [337, 299], [335, 273], [273, 321], [321, 335],
        [348, 450], [450, 349], [349, 348], [359, 446], [446, 467], [467, 359],
        [283, 293], [293, 282], [282, 283], [250, 458], [458, 462], [462, 250],
        [300, 276], [276, 383], [383, 300], [292, 308], [308, 325], [325, 292],
        [283, 276], [276, 293], [293, 283], [264, 372], [372, 447], [447, 264],
        [346, 352], [352, 340], [340, 346], [354, 274], [274, 19], [19, 354],
        [363, 456], [456, 281], [281, 363], [426, 436], [436, 425], [425, 426],
        [380, 381], [381, 252], [252, 380], [267, 269], [269, 393], [393, 267],
        [421, 200], [200, 428], [428, 421], [371, 266], [266, 329], [329, 371],
        [432, 287], [287, 422], [422, 432], [290, 250], [250, 328], [328, 290],
        [385, 258], [258, 384], [384, 385], [446, 265], [265, 342], [342, 446],
        [386, 387], [387, 257], [257, 386], [422, 424], [424, 430], [430, 422],
        [445, 342], [342, 276], [276, 445], [422, 273], [273, 424], [424, 422],
        [306, 292], [292, 307], [307, 306], [352, 366], [366, 345], [345, 352],
        [268, 271], [271, 302], [302, 268], [358, 423], [423, 371], [371, 358],
        [327, 294], [294, 460], [460, 327], [331, 279], [279, 294], [294, 331],
        [303, 271], [271, 304], [304, 303], [436, 432], [432, 427], [427, 436],
        [304, 272], [272, 408], [408, 304], [395, 394], [394, 431], [431, 395],
        [378, 395], [395, 400], [400, 378], [296, 334], [334, 299], [299, 296],
        [6, 351], [351, 168], [168, 6], [376, 352], [352, 411], [411, 376],
        [307, 325], [325, 320], [320, 307], [285, 295], [295, 336], [336, 285],
        [320, 319], [319, 404], [404, 320], [329, 330], [330, 349], [349, 329],
        [334, 293], [293, 333], [333, 334], [366, 323], [323, 447], [447, 366],
        [316, 15], [15, 315], [315, 316], [331, 358], [358, 279], [279, 331],
        [317, 14], [14, 316], [316, 317], [8, 285], [285, 9], [9, 8],
        [277, 329], [329, 350], [350, 277], [253, 374], [374, 252], [252, 253],
        [319, 318], [318, 403], [403, 319], [351, 6], [6, 419], [419, 351],
        [324, 318], [318, 325], [325, 324], [397, 367], [367, 365], [365, 397],
        [288, 435], [435, 397], [397, 288], [278, 344], [344, 439], [439, 278],
        [310, 272], [272, 311], [311, 310], [248, 195], [195, 281], [281, 248],
        [375, 273], [273, 291], [291, 375], [175, 396], [396, 199], [199, 175],
        [312, 311], [311, 268], [268, 312], [276, 283], [283, 445], [445, 276],
        [390, 373], [373, 339], [339, 390], [295, 282], [282, 296], [296, 295],
        [448, 449], [449, 346], [346, 448], [356, 264], [264, 454], [454, 356],
        [337, 336], [336, 299], [299, 337], [337, 338], [338, 151], [151, 337],
        [294, 278], [278, 455], [455, 294], [308, 292], [292, 415], [415, 308],
        [429, 358], [358, 355], [355, 429], [265, 340], [340, 372], [372, 265],
        [352, 346], [346, 280], [280, 352], [295, 442], [442, 282], [282, 295],
        [354, 19], [19, 370], [370, 354], [285, 441], [441, 295], [295, 285],
        [195, 248], [248, 197], [197, 195], [457, 440], [440, 274], [274, 457],
        [301, 300], [300, 368], [368, 301], [417, 351], [351, 465], [465, 417],
        [251, 301], [301, 389], [389, 251], [394, 395], [395, 379], [379, 394],
        [399, 412], [412, 419], [419, 399], [410, 436], [436, 322], [322, 410],
        [326, 2], [2, 393], [393, 326], [354, 370], [370, 461], [461, 354],
        [393, 164], [164, 267], [267, 393], [268, 302], [302, 12], [12, 268],
        [312, 268], [268, 13], [13, 312], [298, 293], [293, 301], [301, 298],
        [265, 446], [446, 340], [340, 265], [280, 330], [330, 425], [425, 280],
        [322, 426], [426, 391], [391, 322], [420, 429], [429, 437], [437, 420],
        [393, 391], [391, 326], [326, 393], [344, 440], [440, 438], [438, 344],
        [458, 459], [459, 461], [461, 458], [364, 434], [434, 394], [394, 364],
        [428, 396], [396, 262], [262, 428], [274, 354], [354, 457], [457, 274],
        [317, 316], [316, 402], [402, 317], [316, 315], [315, 403], [403, 316],
        [315, 314], [314, 404], [404, 315], [314, 313], [313, 405], [405, 314],
        [313, 421], [421, 406], [406, 313], [323, 366], [366, 361], [361, 323],
        [292, 306], [306, 407], [407, 292], [306, 291], [291, 408], [408, 306],
        [291, 287], [287, 409], [409, 291], [287, 432], [432, 410], [410, 287],
        [427, 434], [434, 411], [411, 427], [372, 264], [264, 383], [383, 372],
        [459, 309], [309, 457], [457, 459], [366, 352], [352, 401], [401, 366],
        [1, 274], [274, 4], [4, 1], [418, 421], [421, 262], [262, 418],
        [331, 294], [294, 358], [358, 331], [435, 433], [433, 367], [367, 435],
        [392, 289], [289, 439], [439, 392], [328, 462], [462, 326], [326, 328],
        [94, 2], [2, 370], [370, 94], [289, 305], [305, 455], [455, 289],
        [339, 254], [254, 448], [448, 339], [359, 255], [255, 446], [446, 359],
        [254, 253], [253, 449], [449, 254], [253, 252], [252, 450], [450, 253],
        [252, 256], [256, 451], [451, 252], [256, 341], [341, 452], [452, 256],
        [414, 413], [413, 463], [463, 414], [286, 441], [441, 414], [414, 286],
        [286, 258], [258, 441], [441, 286], [258, 257], [257, 442], [442, 258],
        [257, 259], [259, 443], [443, 257], [259, 260], [260, 444], [444, 259],
        [260, 467], [467, 445], [445, 260], [309, 459], [459, 250], [250, 309],
        [305, 289], [289, 290], [290, 305], [305, 290], [290, 460], [460, 305],
        [401, 376], [376, 435], [435, 401], [309, 250], [250, 392], [392, 309],
        [376, 411], [411, 433], [433, 376], [453, 341], [341, 464], [464, 453],
        [357, 453], [453, 465], [465, 357], [343, 357], [357, 412], [412, 343],
        [437, 343], [343, 399], [399, 437], [344, 360], [360, 440], [440, 344],
        [420, 437], [437, 456], [456, 420], [360, 420], [420, 363], [363, 360],
        [361, 401], [401, 288], [288, 361], [265, 372], [372, 353], [353, 265],
        [390, 339], [339, 249], [249, 390], [339, 448], [448, 255], [255, 339],
    ];
    /**
     * Maps keypoint index to string label.
     * It turns MEDIAPIPE_KEYPOINTS_BY_CONTOUR which looks like {
     *   lips: [61, 146, 91, 181,...]
     *   leftEye: [263, 249, 390, 373, ...]
     *   ...
     * }
     * to the following form: [
     *   [61, lips],
     *   [146, lips],
     *   ...
     *   [263, leftEye],
     *   [249, leftEye],
     *   ...
     * ]
     */
    var indexLabelPairs = Object.entries(MEDIAPIPE_FACE_MESH_KEYPOINTS_BY_CONTOUR)
        .map(function (_a) {
        var label = _a[0], indices = _a[1];
        return indices.map(function (index) { return [index, label]; });
    })
        .flat();
    var MEDIAPIPE_FACE_MESH_KEYPOINTS = new Map(indexLabelPairs);

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Converts normalized Landmark to `Detection`. A relative bounding box will
     * be created containing all landmarks exactly.
     * @param landmarks List of normalized landmarks.
     *
     * @returns A `Detection`.
     */
    // ref:
    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/landmarks_to_detection_calculator.cc
    function landmarksToDetection(landmarks) {
        var detection = { locationData: { relativeKeypoints: [] } };
        var xMin = Number.MAX_SAFE_INTEGER;
        var xMax = Number.MIN_SAFE_INTEGER;
        var yMin = Number.MAX_SAFE_INTEGER;
        var yMax = Number.MIN_SAFE_INTEGER;
        for (var i = 0; i < landmarks.length; ++i) {
            var landmark = landmarks[i];
            xMin = Math.min(xMin, landmark.x);
            xMax = Math.max(xMax, landmark.x);
            yMin = Math.min(yMin, landmark.y);
            yMax = Math.max(yMax, landmark.y);
            detection.locationData.relativeKeypoints.push({ x: landmark.x, y: landmark.y });
        }
        detection.locationData.relativeBoundingBox =
            { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax, width: (xMax - xMin), height: (yMax - yMin) };
        return detection;
    }

    var DEFAULT_FACE_MESH_MODEL_CONFIG$1 = {
        runtime: 'mediapipe',
        maxFaces: 1,
        refineLandmarks: false
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function validateModelConfig$1(modelConfig) {
        if (modelConfig == null) {
            return __assign({}, DEFAULT_FACE_MESH_MODEL_CONFIG$1);
        }
        var config = __assign({}, modelConfig);
        config.runtime = 'mediapipe';
        if (config.maxFaces == null) {
            config.maxFaces = DEFAULT_FACE_MESH_MODEL_CONFIG$1.maxFaces;
        }
        if (config.refineLandmarks == null) {
            config.refineLandmarks = DEFAULT_FACE_MESH_MODEL_CONFIG$1.refineLandmarks;
        }
        return config;
    }

    /**
     * MediaPipe detector class.
     */
    var MediaPipeFaceMeshMediaPipeLandmarksDetector = /** @class */ (function () {
        // Should not be called outside.
        function MediaPipeFaceMeshMediaPipeLandmarksDetector(config) {
            var _this = this;
            // This will be filled out by asynchronous calls to onResults. They will be
            // stable after `await send` is called on the faces solution.
            this.width = 0;
            this.height = 0;
            this.selfieMode = false;
            this.faceMeshSolution = new faceMesh__namespace.FaceMesh({
                locateFile: function (path, base) {
                    if (config.solutionPath) {
                        var solutionPath = config.solutionPath.replace(/\/+$/, '');
                        return solutionPath + "/" + path;
                    }
                    return base + "/" + path;
                }
            });
            this.faceMeshSolution.setOptions({
                refineLandmarks: config.refineLandmarks,
                selfieMode: this.selfieMode,
                maxNumFaces: config.maxFaces,
            });
            this.faceMeshSolution.onResults(function (results) {
                _this.height = results.image.height;
                _this.width = results.image.width;
                _this.faces = [];
                if (results.multiFaceLandmarks !== null) {
                    var landmarksList = results.multiFaceLandmarks;
                    for (var i = 0; i < landmarksList.length; i++) {
                        var keypoints = _this.translateOutput(landmarksList[i]);
                        _this.faces.push({
                            keypoints: keypoints,
                            box: landmarksToDetection(keypoints).locationData.relativeBoundingBox
                        });
                    }
                }
            });
        }
        MediaPipeFaceMeshMediaPipeLandmarksDetector.prototype.translateOutput = function (landmarks) {
            var _this = this;
            var keypoints = landmarks.map(function (landmark, i) {
                var keypoint = {
                    x: landmark.x * _this.width,
                    y: landmark.y * _this.height,
                    z: landmark.z * _this.width,
                };
                var name = MEDIAPIPE_FACE_MESH_KEYPOINTS.get(i);
                if (name != null) {
                    keypoint.name = name;
                }
                return keypoint;
            });
            return keypoints;
        };
        /**
         * Estimates faces for an image or video frame.
         *
         * It returns a single face or multiple faces based on the maxFaceMesh
         * parameter passed to the constructor of the class.
         *
         * @param input
         * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement The input
         * image to feed through the network.
         *
         * @param config Optional.
         *       flipHorizontal: Optional. Default to false. When image data comes
         *       from camera, the result has to flip horizontally.
         *
         *       staticImageMode: Optional. Defaults to false. Currently unused in
         * this implementation. Image input types are assumed to be static images, and
         * video inputs are assumed to be non static images.
         *
         * @return An array of `Face`s.
         */
        MediaPipeFaceMeshMediaPipeLandmarksDetector.prototype.estimateFaces = function (input, estimationConfig) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (estimationConfig && estimationConfig.flipHorizontal &&
                                (estimationConfig.flipHorizontal !== this.selfieMode)) {
                                this.selfieMode = estimationConfig.flipHorizontal;
                                this.faceMeshSolution.setOptions({
                                    selfieMode: this.selfieMode,
                                });
                            }
                            if (!(input instanceof tf__namespace.Tensor)) return [3 /*break*/, 2];
                            _b = ImageData.bind;
                            return [4 /*yield*/, tf__namespace.browser.toPixels(input)];
                        case 1:
                            _a = new (_b.apply(ImageData, [void 0, _c.sent(), input.shape[1], input.shape[0]]))();
                            return [3 /*break*/, 3];
                        case 2:
                            _a = input;
                            _c.label = 3;
                        case 3:
                            // Cast to GL TexImageSource types.
                            input = _a;
                            return [4 /*yield*/, this.faceMeshSolution.send({ image: input })];
                        case 4:
                            _c.sent();
                            return [2 /*return*/, this.faces];
                    }
                });
            });
        };
        MediaPipeFaceMeshMediaPipeLandmarksDetector.prototype.dispose = function () {
            this.faceMeshSolution.close();
        };
        MediaPipeFaceMeshMediaPipeLandmarksDetector.prototype.reset = function () {
            this.faceMeshSolution.reset();
            this.width = 0;
            this.height = 0;
            this.faces = null;
            this.selfieMode = false;
        };
        MediaPipeFaceMeshMediaPipeLandmarksDetector.prototype.initialize = function () {
            return this.faceMeshSolution.initialize();
        };
        return MediaPipeFaceMeshMediaPipeLandmarksDetector;
    }());
    /**
     * Loads the MediaPipe solution.
     *
     * @param modelConfig An object that contains parameters for
     * the MediaPipeFaceMesh loading process. Please find more details of each
     * parameters in the documentation of the
     * `MediaPipeFaceMeshMediaPipeModelConfig` interface.
     */
    function load$1(modelConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var config, detector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = validateModelConfig$1(modelConfig);
                        detector = new MediaPipeFaceMeshMediaPipeLandmarksDetector(config);
                        return [4 /*yield*/, detector.initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, detector];
                }
            });
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var face_detection = {};

    (function(){/*

     Copyright The Closure Library Authors.
     SPDX-License-Identifier: Apache-2.0
    */
    var x;function aa(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var ba="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};
    function ca(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof commonjsGlobal&&commonjsGlobal];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var y=ca(this);function B(a,b){if(b)a:{var c=y;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b});}}
    B("Symbol",function(a){function b(g){if(this instanceof b)throw new TypeError("Symbol is not a constructor");return new c(d+(g||"")+"_"+e++,g)}function c(g,f){this.g=g;ba(this,"description",{configurable:!0,writable:!0,value:f});}if(a)return a;c.prototype.toString=function(){return this.g};var d="jscomp_symbol_"+(1E9*Math.random()>>>0)+"_",e=0;return b});
    B("Symbol.iterator",function(a){if(a)return a;a=Symbol("Symbol.iterator");for(var b="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),c=0;c<b.length;c++){var d=y[b[c]];"function"===typeof d&&"function"!=typeof d.prototype[a]&&ba(d.prototype,a,{configurable:!0,writable:!0,value:function(){return da(aa(this))}});}return a});function da(a){a={next:a};a[Symbol.iterator]=function(){return this};return a}
    function C(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}function D(a){if(!(a instanceof Array)){a=C(a);for(var b,c=[];!(b=a.next()).done;)c.push(b.value);a=c;}return a}var ea="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},fa;
    if("function"==typeof Object.setPrototypeOf)fa=Object.setPrototypeOf;else {var ha;a:{var ia={a:!0},ja={};try{ja.__proto__=ia;ha=ja.a;break a}catch(a){}ha=!1;}fa=ha?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null;}var ka=fa;
    function E(a,b){a.prototype=ea(b.prototype);a.prototype.constructor=a;if(ka)ka(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d);}else a[c]=b[c];a.na=b.prototype;}function la(){this.l=!1;this.i=null;this.h=void 0;this.g=1;this.u=this.o=0;this.j=null;}function ma(a){if(a.l)throw new TypeError("Generator is already running");a.l=!0;}la.prototype.s=function(a){this.h=a;};
    function na(a,b){a.j={da:b,ea:!0};a.g=a.o||a.u;}la.prototype.return=function(a){this.j={return:a};this.g=this.u;};function G(a,b,c){a.g=c;return {value:b}}function oa(a){this.g=new la;this.h=a;}function pa(a,b){ma(a.g);var c=a.g.i;if(c)return qa(a,"return"in c?c["return"]:function(d){return {value:d,done:!0}},b,a.g.return);a.g.return(b);return H(a)}
    function qa(a,b,c,d){try{var e=b.call(a.g.i,c);if(!(e instanceof Object))throw new TypeError("Iterator result "+e+" is not an object");if(!e.done)return a.g.l=!1,e;var g=e.value;}catch(f){return a.g.i=null,na(a.g,f),H(a)}a.g.i=null;d.call(a.g,g);return H(a)}function H(a){for(;a.g.g;)try{var b=a.h(a.g);if(b)return a.g.l=!1,{value:b.value,done:!1}}catch(c){a.g.h=void 0,na(a.g,c);}a.g.l=!1;if(a.g.j){b=a.g.j;a.g.j=null;if(b.ea)throw b.da;return {value:b.return,done:!0}}return {value:void 0,done:!0}}
    function ra(a){this.next=function(b){ma(a.g);a.g.i?b=qa(a,a.g.i.next,b,a.g.s):(a.g.s(b),b=H(a));return b};this.throw=function(b){ma(a.g);a.g.i?b=qa(a,a.g.i["throw"],b,a.g.s):(na(a.g,b),b=H(a));return b};this.return=function(b){return pa(a,b)};this[Symbol.iterator]=function(){return this};}function sa(a){function b(d){return a.next(d)}function c(d){return a.throw(d)}return new Promise(function(d,e){function g(f){f.done?d(f.value):Promise.resolve(f.value).then(b,c).then(g,e);}g(a.next());})}
    function J(a){return sa(new ra(new oa(a)))}
    B("Promise",function(a){function b(f){this.h=0;this.i=void 0;this.g=[];this.s=!1;var h=this.j();try{f(h.resolve,h.reject);}catch(k){h.reject(k);}}function c(){this.g=null;}function d(f){return f instanceof b?f:new b(function(h){h(f);})}if(a)return a;c.prototype.h=function(f){if(null==this.g){this.g=[];var h=this;this.i(function(){h.l();});}this.g.push(f);};var e=y.setTimeout;c.prototype.i=function(f){e(f,0);};c.prototype.l=function(){for(;this.g&&this.g.length;){var f=this.g;this.g=[];for(var h=0;h<f.length;++h){var k=
    f[h];f[h]=null;try{k();}catch(l){this.j(l);}}}this.g=null;};c.prototype.j=function(f){this.i(function(){throw f;});};b.prototype.j=function(){function f(l){return function(m){k||(k=!0,l.call(h,m));}}var h=this,k=!1;return {resolve:f(this.D),reject:f(this.l)}};b.prototype.D=function(f){if(f===this)this.l(new TypeError("A Promise cannot resolve to itself"));else if(f instanceof b)this.H(f);else {a:switch(typeof f){case "object":var h=null!=f;break a;case "function":h=!0;break a;default:h=!1;}h?this.A(f):this.o(f);}};
    b.prototype.A=function(f){var h=void 0;try{h=f.then;}catch(k){this.l(k);return}"function"==typeof h?this.I(h,f):this.o(f);};b.prototype.l=function(f){this.u(2,f);};b.prototype.o=function(f){this.u(1,f);};b.prototype.u=function(f,h){if(0!=this.h)throw Error("Cannot settle("+f+", "+h+"): Promise already settled in state"+this.h);this.h=f;this.i=h;2===this.h&&this.G();this.B();};b.prototype.G=function(){var f=this;e(function(){if(f.C()){var h=y.console;"undefined"!==typeof h&&h.error(f.i);}},1);};b.prototype.C=
    function(){if(this.s)return !1;var f=y.CustomEvent,h=y.Event,k=y.dispatchEvent;if("undefined"===typeof k)return !0;"function"===typeof f?f=new f("unhandledrejection",{cancelable:!0}):"function"===typeof h?f=new h("unhandledrejection",{cancelable:!0}):(f=y.document.createEvent("CustomEvent"),f.initCustomEvent("unhandledrejection",!1,!0,f));f.promise=this;f.reason=this.i;return k(f)};b.prototype.B=function(){if(null!=this.g){for(var f=0;f<this.g.length;++f)g.h(this.g[f]);this.g=null;}};var g=new c;b.prototype.H=
    function(f){var h=this.j();f.M(h.resolve,h.reject);};b.prototype.I=function(f,h){var k=this.j();try{f.call(h,k.resolve,k.reject);}catch(l){k.reject(l);}};b.prototype.then=function(f,h){function k(p,n){return "function"==typeof p?function(r){try{l(p(r));}catch(t){m(t);}}:n}var l,m,q=new b(function(p,n){l=p;m=n;});this.M(k(f,l),k(h,m));return q};b.prototype.catch=function(f){return this.then(void 0,f)};b.prototype.M=function(f,h){function k(){switch(l.h){case 1:f(l.i);break;case 2:h(l.i);break;default:throw Error("Unexpected state: "+
    l.h);}}var l=this;null==this.g?g.h(k):this.g.push(k);this.s=!0;};b.resolve=d;b.reject=function(f){return new b(function(h,k){k(f);})};b.race=function(f){return new b(function(h,k){for(var l=C(f),m=l.next();!m.done;m=l.next())d(m.value).M(h,k);})};b.all=function(f){var h=C(f),k=h.next();return k.done?d([]):new b(function(l,m){function q(r){return function(t){p[r]=t;n--;0==n&&l(p);}}var p=[],n=0;do p.push(void 0),n++,d(k.value).M(q(p.length-1),m),k=h.next();while(!k.done)})};return b});
    function ta(a,b){a instanceof String&&(a+="");var c=0,d=!1,e={next:function(){if(!d&&c<a.length){var g=c++;return {value:b(g,a[g]),done:!1}}d=!0;return {done:!0,value:void 0}}};e[Symbol.iterator]=function(){return e};return e}var ua="function"==typeof Object.assign?Object.assign:function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(d)for(var e in d)Object.prototype.hasOwnProperty.call(d,e)&&(a[e]=d[e]);}return a};B("Object.assign",function(a){return a||ua});
    B("Object.is",function(a){return a?a:function(b,c){return b===c?0!==b||1/b===1/c:b!==b&&c!==c}});B("Array.prototype.includes",function(a){return a?a:function(b,c){var d=this;d instanceof String&&(d=String(d));var e=d.length;c=c||0;for(0>c&&(c=Math.max(c+e,0));c<e;c++){var g=d[c];if(g===b||Object.is(g,b))return !0}return !1}});
    B("String.prototype.includes",function(a){return a?a:function(b,c){if(null==this)throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype.includes must not be a regular expression");return -1!==this.indexOf(b,c||0)}});B("Array.prototype.keys",function(a){return a?a:function(){return ta(this,function(b){return b})}});var va=this||self;
    function K(a,b){a=a.split(".");var c=va;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c[d]&&c[d]!==Object.prototype[d]?c=c[d]:c=c[d]={}:c[d]=b;}function L(){throw Error("Invalid UTF8");}function wa(a,b){b=String.fromCharCode.apply(null,b);return null==a?b:a+b}var xa,ya="undefined"!==typeof TextDecoder,za,Aa="undefined"!==typeof TextEncoder;var Ba={},M=null;function Ca(a){var b;void 0===b&&(b=0);Da();b=Ba[b];for(var c=Array(Math.floor(a.length/3)),d=b[64]||"",e=0,g=0;e<a.length-2;e+=3){var f=a[e],h=a[e+1],k=a[e+2],l=b[f>>2];f=b[(f&3)<<4|h>>4];h=b[(h&15)<<2|k>>6];k=b[k&63];c[g++]=l+f+h+k;}l=0;k=d;switch(a.length-e){case 2:l=a[e+1],k=b[(l&15)<<2]||d;case 1:a=a[e],c[g]=b[a>>2]+b[(a&3)<<4|l>>4]+k+d;}return c.join("")}
    function Ea(a){var b=a.length,c=3*b/4;c%3?c=Math.floor(c):-1!="=.".indexOf(a[b-1])&&(c=-1!="=.".indexOf(a[b-2])?c-2:c-1);var d=new Uint8Array(c),e=0;Fa(a,function(g){d[e++]=g;});return e!==c?d.subarray(0,e):d}
    function Fa(a,b){function c(k){for(;d<a.length;){var l=a.charAt(d++),m=M[l];if(null!=m)return m;if(!/^[\s\xa0]*$/.test(l))throw Error("Unknown base64 encoding at char: "+l);}return k}Da();for(var d=0;;){var e=c(-1),g=c(0),f=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|g>>4);64!=f&&(b(g<<4&240|f>>2),64!=h&&b(f<<6&192|h));}}
    function Da(){if(!M){M={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));Ba[c]=d;for(var e=0;e<d.length;e++){var g=d[e];void 0===M[g]&&(M[g]=e);}}}}var Ga="function"===typeof Uint8Array;function Ha(a){return Ga&&null!=a&&a instanceof Uint8Array}var Ia;function Ja(a){this.L=a;if(null!==a&&0===a.length)throw Error("ByteString should be constructed with non-empty values");}var Ka="function"===typeof Uint8Array.prototype.slice,N=0,O=0;
    function La(a,b){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer)return new Uint8Array(a);if(a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return Ea(a);if(a.constructor===Ja){if(!b&&(b=a.L)&&b.constructor===Uint8Array)return b;b=a.L;b=null==b||Ha(b)?b:"string"===typeof b?Ea(b):null;return (a=a.L=b)?new Uint8Array(a):Ia||(Ia=new Uint8Array(0))}if(a instanceof Uint8Array)return new Uint8Array(a.buffer,a.byteOffset,a.byteLength);throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, or Array of numbers");
    }function Ma(a,b){return Error("Invalid wire type: "+a+" (at position "+b+")")}function Na(){return Error("Failed to read varint, encoding is invalid.")}function Oa(a,b){b=void 0===b?{}:b;b=void 0===b.v?!1:b.v;this.h=null;this.g=this.i=this.j=0;this.v=b;a&&Pa(this,a);}function Pa(a,b){a.h=La(b,a.v);a.j=0;a.i=a.h.length;a.g=a.j;}Oa.prototype.reset=function(){this.g=this.j;};function P(a){if(a.g>a.i)throw Error("Tried to read past the end of the data "+a.g+" > "+a.i);}
    function Q(a){var b=a.h,c=b[a.g],d=c&127;if(128>c)return a.g+=1,P(a),d;c=b[a.g+1];d|=(c&127)<<7;if(128>c)return a.g+=2,P(a),d;c=b[a.g+2];d|=(c&127)<<14;if(128>c)return a.g+=3,P(a),d;c=b[a.g+3];d|=(c&127)<<21;if(128>c)return a.g+=4,P(a),d;c=b[a.g+4];a.g+=5;d|=(c&15)<<28;if(128>c)return P(a),d;if(128<=b[a.g++]&&128<=b[a.g++]&&128<=b[a.g++]&&128<=b[a.g++]&&128<=b[a.g++])throw Na();P(a);return d}var Qa=[];function Ra(){this.g=[];}Ra.prototype.length=function(){return this.g.length};Ra.prototype.end=function(){var a=this.g;this.g=[];return a};function S(a,b){for(;127<b;)a.g.push(b&127|128),b>>>=7;a.g.push(b);}function Sa(a){var b={},c=void 0===b.W?!1:b.W;this.l={v:void 0===b.v?!1:b.v};this.W=c;b=this.l;Qa.length?(c=Qa.pop(),b&&(c.v=b.v),a&&Pa(c,a),a=c):a=new Oa(a,b);this.g=a;this.j=this.g.g;this.h=this.i=-1;}Sa.prototype.reset=function(){this.g.reset();this.j=this.g.g;this.h=this.i=-1;};function Ta(a){var b=a.g;if(b.g==b.i)return !1;a.j=a.g.g;var c=Q(a.g)>>>0;b=c>>>3;c&=7;if(!(0<=c&&5>=c))throw Ma(c,a.j);if(1>b)throw Error("Invalid field number: "+b+" (at position "+a.j+")");a.i=b;a.h=c;return !0}
    function Ua(a){switch(a.h){case 0:if(0!=a.h)Ua(a);else a:{a=a.g;for(var b=a.g,c=b+10;b<c;)if(0===(a.h[b++]&128)){a.g=b;P(a);break a}throw Na();}break;case 1:a=a.g;a.g+=8;P(a);break;case 2:2!=a.h?Ua(a):(b=Q(a.g)>>>0,a=a.g,a.g+=b,P(a));break;case 5:a=a.g;a.g+=4;P(a);break;case 3:b=a.i;do{if(!Ta(a))throw Error("Unmatched start-group tag: stream EOF");if(4==a.h){if(a.i!=b)throw Error("Unmatched end-group tag");break}Ua(a);}while(1);break;default:throw Ma(a.h,a.j);}}var Va=[];function Wa(){this.i=[];this.h=0;this.g=new Ra;}function T(a,b){0!==b.length&&(a.i.push(b),a.h+=b.length);}function Xa(a,b){if(b=b.ba){T(a,a.g.end());for(var c=0;c<b.length;c++)T(a,b[c]);}}var U="function"===typeof Symbol&&"symbol"===typeof Symbol()?Symbol(void 0):void 0;function Ya(a,b){Object.isFrozen(a)||(U?a[U]|=b:void 0!==a.N?a.N|=b:Object.defineProperties(a,{N:{value:b,configurable:!0,writable:!0,enumerable:!1}}));}function Za(a){var b;U?b=a[U]:b=a.N;return null==b?0:b}function $a(a){Ya(a,1);return a}function ab(a){return Array.isArray(a)?!!(Za(a)&2):!1}function bb(a){if(!Array.isArray(a))throw Error("cannot mark non-array as immutable");Ya(a,2);}function cb(a){return null!==a&&"object"===typeof a&&!Array.isArray(a)&&a.constructor===Object}var db=Object.freeze($a([]));function eb(a){if(ab(a.m))throw Error("Cannot mutate an immutable Message");}var fb="undefined"!=typeof Symbol&&"undefined"!=typeof Symbol.hasInstance;function gb(a){return {value:a,configurable:!1,writable:!1,enumerable:!1}}function V(a,b,c){return -1===b?null:b>=a.i?a.g?a.g[b]:void 0:(void 0===c?0:c)&&a.g&&(c=a.g[b],null!=c)?c:a.m[b+a.h]}function W(a,b,c,d){d=void 0===d?!1:d;eb(a);b<a.i&&!d?a.m[b+a.h]=c:(a.g||(a.g=a.m[a.i+a.h]={}))[b]=c;}function hb(a,b,c,d){c=void 0===c?!0:c;d=void 0===d?!1:d;var e=V(a,b,d);null==e&&(e=db);if(ab(a.m))c&&(bb(e),Object.freeze(e));else if(e===db||ab(e))e=$a(e.slice()),W(a,b,e,d);return e}function X(a,b,c){a=V(a,b);a=null==a?a:+a;return null==a?void 0===c?0:c:a}
    function ib(a,b,c,d){a.j||(a.j={});var e=ab(a.m),g=a.j[c];if(!g){d=hb(a,c,!0,void 0===d?!1:d);g=[];e=e||ab(d);for(var f=0;f<d.length;f++)g[f]=new b(d[f]),e&&bb(g[f].m);e&&(bb(g),Object.freeze(g));a.j[c]=g;}return g}function jb(a,b,c,d,e){var g=void 0===g?!1:g;eb(a);g=ib(a,c,b,g);c=d?d:new c;a=hb(a,b);void 0!=e?(g.splice(e,0,c),a.splice(e,0,c.m)):(g.push(c),a.push(c.m));return c}function kb(a,b){a=V(a,b);return null==a?0:a}function lb(a,b){a=V(a,b);return null==a?"":a}function mb(a){switch(typeof a){case "number":return isFinite(a)?a:String(a);case "object":if(a&&!Array.isArray(a)){if(Ha(a))return Ca(a);if(a instanceof Ja){var b=a.L;b=null==b||"string"===typeof b?b:Ga&&b instanceof Uint8Array?Ca(b):null;return (a.L=b)||""}}}return a}function nb(a){var b=ob;b=void 0===b?pb:b;return qb(a,b)}function rb(a,b){if(null!=a){if(Array.isArray(a))a=qb(a,b);else if(cb(a)){var c={},d;for(d in a)c[d]=rb(a[d],b);a=c;}else a=b(a);return a}}function qb(a,b){for(var c=a.slice(),d=0;d<c.length;d++)c[d]=rb(c[d],b);Array.isArray(a)&&Za(a)&1&&$a(c);return c}function ob(a){if(a&&"object"==typeof a&&a.toJSON)return a.toJSON();a=mb(a);return Array.isArray(a)?nb(a):a}function pb(a){return Ha(a)?new Uint8Array(a):a}function sb(a,b,c){a||(a=tb);tb=null;var d=this.constructor.h;a||(a=d?[d]:[]);this.h=(d?0:-1)-(this.constructor.g||0);this.j=void 0;this.m=a;a:{d=this.m.length;a=d-1;if(d&&(d=this.m[a],cb(d))){this.i=a-this.h;this.g=d;break a}void 0!==b&&-1<b?(this.i=Math.max(b,a+1-this.h),this.g=void 0):this.i=Number.MAX_VALUE;}if(c)for(b=0;b<c.length;b++)if(a=c[b],a<this.i)a+=this.h,(d=this.m[a])?Array.isArray(d)&&$a(d):this.m[a]=db;else {d=this.g||(this.g=this.m[this.i+this.h]={});var e=d[a];e?Array.isArray(e)&&
    $a(e):d[a]=db;}}sb.prototype.toJSON=function(){return nb(this.m)};sb.prototype.toString=function(){return this.m.toString()};var tb;function ub(){sb.apply(this,arguments);}E(ub,sb);if(fb){var vb={};Object.defineProperties(ub,(vb[Symbol.hasInstance]=gb(function(){throw Error("Cannot perform instanceof checks for MutableMessage");}),vb));}function wb(a,b,c){if(c){var d={},e;for(e in c){var g=c[e],f=g.ha;f||(d.F=g.la||g.fa.P,g.aa?(d.U=xb(g.aa),f=function(h){return function(k,l,m){return h.F(k,l,m,h.U)}}(d)):g.ca?(d.T=yb(g.X.g,g.ca),f=function(h){return function(k,l,m){return h.F(k,l,m,h.T)}}(d)):f=d.F,g.ha=f);f(b,a,g.X);d={F:d.F,U:d.U,T:d.T};}}Xa(b,a);}var zb=Symbol();function Ab(a,b,c){return a[zb]||(a[zb]=function(d,e){return b(d,e,c)})}
    function Bb(a){var b=a[zb];if(!b){var c=Cb(a);b=function(d,e){return Db(d,e,c)};a[zb]=b;}return b}function Eb(a){var b=a.aa;if(b)return Bb(b);if(b=a.ka)return Ab(a.X.g,b,a.ca)}function Fb(a){var b=Eb(a),c=a.X,d=a.fa.O;return b?function(e,g){return d(e,g,c,b)}:function(e,g){return d(e,g,c)}}
    function Gb(a,b,c,d,e,g){a=a();var f=0;a.length&&"number"!==typeof a[0]&&(c(b,a[0]),f++);for(;f<a.length;){c=a[f++];for(var h=f+1;h<a.length&&"number"!==typeof a[h];)h++;var k=a[f++];h-=f;switch(h){case 0:d(b,c,k);break;case 1:d(b,c,k,a[f++]);break;case 2:e(b,c,k,a[f++],a[f++]);break;case 3:h=a[f++];var l=a[f++],m=a[f++];Array.isArray(m)?e(b,c,k,h,l,m):g(b,c,k,h,l,m);break;case 4:g(b,c,k,a[f++],a[f++],a[f++],a[f++]);break;default:throw Error("unexpected number of binary field arguments: "+h);}}return b}
    var Hb=Symbol();function xb(a){var b=a[Hb];if(!b){var c=Ib(a);b=function(d,e){return Jb(d,e,c)};a[Hb]=b;}return b}function yb(a,b){var c=a[Hb];c||(c=function(d,e){return wb(d,e,b)},a[Hb]=c);return c}var Kb=Symbol();function Lb(a,b){a.push(b);}function Mb(a,b,c){a.push(b,c.P);}function Nb(a,b,c,d,e){var g=xb(e),f=c.P;a.push(b,function(h,k,l){return f(h,k,l,d,g)});}function Ob(a,b,c,d,e,g){var f=yb(d,g),h=c.P;a.push(b,function(k,l,m){return h(k,l,m,d,f)});}
    function Ib(a){var b=a[Kb];return b?b:Gb(a,a[Kb]=[],Lb,Mb,Nb,Ob)}var Pb=Symbol();function Qb(a,b){a[0]=b;}function Rb(a,b,c,d){var e=c.O;a[b]=d?function(g,f,h){return e(g,f,h,d)}:e;}function Sb(a,b,c,d,e,g){var f=c.O,h=Bb(e);a[b]=function(k,l,m){return f(k,l,m,d,h,g)};}function Tb(a,b,c,d,e,g,f){var h=c.O,k=Ab(d,e,g);a[b]=function(l,m,q){return h(l,m,q,d,k,f)};}function Cb(a){var b=a[Pb];return b?b:Gb(a,a[Pb]={},Qb,Rb,Sb,Tb)}
    function Db(a,b,c){for(;Ta(b)&&4!=b.h;){var d=b.i,e=c[d];if(!e){var g=c[0];g&&(g=g[d])&&(e=c[d]=Fb(g));}if(!e||!e(b,a,d))if(e=b,d=a,g=e.j,Ua(e),!e.W){var f=e.g.h;e=e.g.g;e=g===e?Ia||(Ia=new Uint8Array(0)):Ka?f.slice(g,e):new Uint8Array(f.subarray(g,e));(g=d.ba)?g.push(e):d.ba=[e];}}return a}
    function Ub(a,b,c){if(Va.length){var d=Va.pop();a&&(Pa(d.g,a),d.i=-1,d.h=-1);a=d;}else a=new Sa(a);try{return Db(new b,a,Cb(c))}finally{b=a.g,b.h=null,b.j=0,b.i=0,b.g=0,b.v=!1,a.i=-1,a.h=-1,100>Va.length&&Va.push(a);}}function Jb(a,b,c){for(var d=c.length,e=1==d%2,g=e?1:0;g<d;g+=2)(0, c[g+1])(b,a,c[g]);wb(a,b,e?c[0]:void 0);}function Vb(a,b){var c=new Wa;Jb(a,c,Ib(b));T(c,c.g.end());a=new Uint8Array(c.h);b=c.i;for(var d=b.length,e=0,g=0;g<d;g++){var f=b[g];a.set(f,e);e+=f.length;}c.i=[a];return a}
    function Wb(a,b){return {O:a,P:b}}
    var Y=Wb(function(a,b,c){if(5!==a.h)return !1;a=a.g;var d=a.h[a.g];var e=a.h[a.g+1];var g=a.h[a.g+2],f=a.h[a.g+3];a.g+=4;P(a);e=(d<<0|e<<8|g<<16|f<<24)>>>0;a=2*(e>>31)+1;d=e>>>23&255;e&=8388607;W(b,c,255==d?e?NaN:Infinity*a:0==d?a*Math.pow(2,-149)*e:a*Math.pow(2,d-150)*(e+Math.pow(2,23)));return !0},function(a,b,c){b=V(b,c);if(null!=b){S(a.g,8*c+5);a=a.g;var d=b;d=(c=0>d?1:0)?-d:d;0===d?0<1/d?N=O=0:(O=0,N=2147483648):isNaN(d)?(O=0,N=2147483647):3.4028234663852886E38<d?(O=0,N=(c<<31|2139095040)>>>0):
    1.1754943508222875E-38>d?(d=Math.round(d/Math.pow(2,-149)),O=0,N=(c<<31|d)>>>0):(b=Math.floor(Math.log(d)/Math.LN2),d*=Math.pow(2,-b),d=Math.round(8388608*d),16777216<=d&&++b,O=0,N=(c<<31|b+127<<23|d&8388607)>>>0);c=N;a.g.push(c>>>0&255);a.g.push(c>>>8&255);a.g.push(c>>>16&255);a.g.push(c>>>24&255);}}),Xb=Wb(function(a,b,c){if(0!==a.h)return !1;for(var d=a.g,e=128,g=0,f=a=0;4>f&&128<=e;f++)e=d.h[d.g++],P(d),g|=(e&127)<<7*f;128<=e&&(e=d.h[d.g++],P(d),g|=(e&127)<<28,a|=(e&127)>>4);if(128<=e)for(f=0;5>
    f&&128<=e;f++)e=d.h[d.g++],P(d),a|=(e&127)<<7*f+3;if(128>e){d=g>>>0;e=a>>>0;if(a=e&2147483648)d=~d+1>>>0,e=~e>>>0,0==d&&(e=e+1>>>0);d=4294967296*e+(d>>>0);}else throw Na();W(b,c,a?-d:d);return !0},function(a,b,c){b=V(b,c);if(null!=b&&null!=b){S(a.g,8*c);a=a.g;var d=b;c=0>d;d=Math.abs(d);b=d>>>0;d=Math.floor((d-b)/4294967296);d>>>=0;c&&(d=~d>>>0,b=(~b>>>0)+1,4294967295<b&&(b=0,d++,4294967295<d&&(d=0)));N=b;O=d;c=N;for(b=O;0<b||127<c;)a.g.push(c&127|128),c=(c>>>7|b<<25)>>>0,b>>>=7;a.g.push(c);}}),Yb=Wb(function(a,
    b,c){if(0!==a.h)return !1;W(b,c,Q(a.g));return !0},function(a,b,c){b=V(b,c);if(null!=b&&null!=b)if(S(a.g,8*c),a=a.g,c=b,0<=c)S(a,c);else {for(b=0;9>b;b++)a.g.push(c&127|128),c>>=7;a.g.push(1);}}),Zb=Wb(function(a,b,c){if(2!==a.h)return !1;var d=Q(a.g)>>>0;a=a.g;var e=a.g;a.g+=d;P(a);a=a.h;var g;if(ya)(g=xa)||(g=xa=new TextDecoder("utf-8",{fatal:!0})),g=g.decode(a.subarray(e,e+d));else {d=e+d;for(var f=[],h=null,k,l,m;e<d;)k=a[e++],128>k?f.push(k):224>k?e>=d?L():(l=a[e++],194>k||128!==(l&192)?(e--,L()):
    f.push((k&31)<<6|l&63)):240>k?e>=d-1?L():(l=a[e++],128!==(l&192)||224===k&&160>l||237===k&&160<=l||128!==((g=a[e++])&192)?(e--,L()):f.push((k&15)<<12|(l&63)<<6|g&63)):244>=k?e>=d-2?L():(l=a[e++],128!==(l&192)||0!==(k<<28)+(l-144)>>30||128!==((g=a[e++])&192)||128!==((m=a[e++])&192)?(e--,L()):(k=(k&7)<<18|(l&63)<<12|(g&63)<<6|m&63,k-=65536,f.push((k>>10&1023)+55296,(k&1023)+56320))):L(),8192<=f.length&&(h=wa(h,f),f.length=0);g=wa(h,f);}W(b,c,g);return !0},function(a,b,c){b=V(b,c);if(null!=b){var d=!1;
    d=void 0===d?!1:d;if(Aa){if(d&&/(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/.test(b))throw Error("Found an unpaired surrogate");b=(za||(za=new TextEncoder)).encode(b);}else {for(var e=0,g=new Uint8Array(3*b.length),f=0;f<b.length;f++){var h=b.charCodeAt(f);if(128>h)g[e++]=h;else {if(2048>h)g[e++]=h>>6|192;else {if(55296<=h&&57343>=h){if(56319>=h&&f<b.length){var k=b.charCodeAt(++f);if(56320<=k&&57343>=k){h=1024*(h-55296)+k-56320+65536;g[e++]=h>>18|240;g[e++]=h>>12&63|128;
    g[e++]=h>>6&63|128;g[e++]=h&63|128;continue}else f--;}if(d)throw Error("Found an unpaired surrogate");h=65533;}g[e++]=h>>12|224;g[e++]=h>>6&63|128;}g[e++]=h&63|128;}}b=g.subarray(0,e);}S(a.g,8*c+2);S(a.g,b.length);T(a,a.g.end());T(a,b);}}),$b=Wb(function(a,b,c,d,e){if(2!==a.h)return !1;b=jb(b,c,d);c=a.g.i;d=Q(a.g)>>>0;var g=a.g.g+d,f=g-c;0>=f&&(a.g.i=g,e(b,a),f=g-a.g.g);if(f)throw Error("Message parsing ended unexpectedly. Expected to read "+(d+" bytes, instead read "+(d-f)+" bytes, either the data ended unexpectedly or the message misreported its own length"));
    a.g.g=g;a.g.i=c;return !0},function(a,b,c,d,e){b=ib(b,d,c);if(null!=b)for(d=0;d<b.length;d++){var g=a;S(g.g,8*c+2);var f=g.g.end();T(g,f);f.push(g.h);g=f;e(b[d],a);f=a;var h=g.pop();for(h=f.h+f.g.length()-h;127<h;)g.push(h&127|128),h>>>=7,f.h++;g.push(h);f.h++;}});function Z(){ub.apply(this,arguments);}E(Z,ub);if(fb){var ac={};Object.defineProperties(Z,(ac[Symbol.hasInstance]=gb(Object[Symbol.hasInstance]),ac));}function bc(a){Z.call(this,a);}E(bc,Z);function cc(){return [1,Yb,2,Y,3,Zb,4,Zb]}function dc(a){Z.call(this,a,-1,ec);}E(dc,Z);dc.prototype.addClassification=function(a,b){jb(this,1,bc,a,b);return this};function fc(){return [1,$b,bc,cc]}var ec=[1];function gc(a){Z.call(this,a);}E(gc,Z);function hc(){return [1,Y,2,Y,3,Y,4,Y,5,Y]}function ic(a){Z.call(this,a,-1,jc);}E(ic,Z);function kc(){return [1,$b,gc,hc]}var jc=[1];function lc(a){Z.call(this,a);}E(lc,Z);function mc(){return [1,Y,2,Y,3,Y,4,Y,5,Y,6,Xb]}var nc=[[61,146],[146,91],[91,181],[181,84],[84,17],[17,314],[314,405],[405,321],[321,375],[375,291],[61,185],[185,40],[40,39],[39,37],[37,0],[0,267],[267,269],[269,270],[270,409],[409,291],[78,95],[95,88],[88,178],[178,87],[87,14],[14,317],[317,402],[402,318],[318,324],[324,308],[78,191],[191,80],[80,81],[81,82],[82,13],[13,312],[312,311],[311,310],[310,415],[415,308]],oc=[[263,249],[249,390],[390,373],[373,374],[374,380],[380,381],[381,382],[382,362],[263,466],[466,388],[388,387],[387,386],[386,
    385],[385,384],[384,398],[398,362]],pc=[[276,283],[283,282],[282,295],[295,285],[300,293],[293,334],[334,296],[296,336]],qc=[[33,7],[7,163],[163,144],[144,145],[145,153],[153,154],[154,155],[155,133],[33,246],[246,161],[161,160],[160,159],[159,158],[158,157],[157,173],[173,133]],rc=[[46,53],[53,52],[52,65],[65,55],[70,63],[63,105],[105,66],[66,107]],sc=[[10,338],[338,297],[297,332],[332,284],[284,251],[251,389],[389,356],[356,454],[454,323],[323,361],[361,288],[288,397],[397,365],[365,379],[379,378],
    [378,400],[400,377],[377,152],[152,148],[148,176],[176,149],[149,150],[150,136],[136,172],[172,58],[58,132],[132,93],[93,234],[234,127],[127,162],[162,21],[21,54],[54,103],[103,67],[67,109],[109,10]],tc=[].concat(D(nc),D(oc),D(pc),D(qc),D(rc),D(sc));function uc(a,b,c){c=a.createShader(0===c?a.VERTEX_SHADER:a.FRAGMENT_SHADER);a.shaderSource(c,b);a.compileShader(c);if(!a.getShaderParameter(c,a.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+a.getShaderInfoLog(c));return c}function vc(a){return ib(a,bc,1).map(function(b){return {index:kb(b,1),ga:X(b,2),label:null!=V(b,3)?lb(b,3):void 0,displayName:null!=V(b,4)?lb(b,4):void 0}})}function wc(a){return {x:X(a,1),y:X(a,2),z:X(a,3),visibility:null!=V(a,4)?X(a,4):void 0}}function xc(a,b){this.h=a;this.g=b;this.l=0;}
    function yc(a,b,c){zc(a,b);if("function"===typeof a.g.canvas.transferToImageBitmap)return Promise.resolve(a.g.canvas.transferToImageBitmap());if(c)return Promise.resolve(a.g.canvas);if("function"===typeof createImageBitmap)return createImageBitmap(a.g.canvas);void 0===a.i&&(a.i=document.createElement("canvas"));return new Promise(function(d){a.i.height=a.g.canvas.height;a.i.width=a.g.canvas.width;a.i.getContext("2d",{}).drawImage(a.g.canvas,0,0,a.g.canvas.width,a.g.canvas.height);d(a.i);})}
    function zc(a,b){var c=a.g;if(void 0===a.o){var d=uc(c,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),e=uc(c,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),g=c.createProgram();c.attachShader(g,d);c.attachShader(g,e);c.linkProgram(g);if(!c.getProgramParameter(g,c.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+
    c.getProgramInfoLog(g));d=a.o=g;c.useProgram(d);e=c.getUniformLocation(d,"sampler0");a.j={K:c.getAttribLocation(d,"aVertex"),J:c.getAttribLocation(d,"aTex"),ma:e};a.u=c.createBuffer();c.bindBuffer(c.ARRAY_BUFFER,a.u);c.enableVertexAttribArray(a.j.K);c.vertexAttribPointer(a.j.K,2,c.FLOAT,!1,0,0);c.bufferData(c.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),c.STATIC_DRAW);c.bindBuffer(c.ARRAY_BUFFER,null);a.s=c.createBuffer();c.bindBuffer(c.ARRAY_BUFFER,a.s);c.enableVertexAttribArray(a.j.J);c.vertexAttribPointer(a.j.J,
    2,c.FLOAT,!1,0,0);c.bufferData(c.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),c.STATIC_DRAW);c.bindBuffer(c.ARRAY_BUFFER,null);c.uniform1i(e,0);}d=a.j;c.useProgram(a.o);c.canvas.width=b.width;c.canvas.height=b.height;c.viewport(0,0,b.width,b.height);c.activeTexture(c.TEXTURE0);a.h.bindTexture2d(b.glName);c.enableVertexAttribArray(d.K);c.bindBuffer(c.ARRAY_BUFFER,a.u);c.vertexAttribPointer(d.K,2,c.FLOAT,!1,0,0);c.enableVertexAttribArray(d.J);c.bindBuffer(c.ARRAY_BUFFER,a.s);c.vertexAttribPointer(d.J,
    2,c.FLOAT,!1,0,0);c.bindFramebuffer(c.DRAW_FRAMEBUFFER?c.DRAW_FRAMEBUFFER:c.FRAMEBUFFER,null);c.clearColor(0,0,0,0);c.clear(c.COLOR_BUFFER_BIT);c.colorMask(!0,!0,!0,!0);c.drawArrays(c.TRIANGLE_FAN,0,4);c.disableVertexAttribArray(d.K);c.disableVertexAttribArray(d.J);c.bindBuffer(c.ARRAY_BUFFER,null);a.h.bindTexture2d(0);}function Ac(a){this.g=a;}var Bc=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function Cc(a,b){return b+a}function Dc(a,b){window[a]=b;}function Ec(a){var b=document.createElement("script");b.setAttribute("src",a);b.setAttribute("crossorigin","anonymous");return new Promise(function(c){b.addEventListener("load",function(){c();},!1);b.addEventListener("error",function(){c();},!1);document.body.appendChild(b);})}
    function Fc(){return J(function(a){switch(a.g){case 1:return a.o=2,G(a,WebAssembly.instantiate(Bc),4);case 4:a.g=3;a.o=0;break;case 2:return a.o=0,a.j=null,a.return(!1);case 3:return a.return(!0)}})}
    function Gc(a){this.g=a;this.listeners={};this.j={};this.H={};this.o={};this.u={};this.I=this.s=this.Z=!0;this.D=Promise.resolve();this.Y="";this.C={};this.locateFile=a&&a.locateFile||Cc;if("object"===typeof window)var b=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else if("undefined"!==typeof location)b=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/";else throw Error("solutions can only be loaded on a web page or in a web worker");
    this.$=b;if(a.options){b=C(Object.keys(a.options));for(var c=b.next();!c.done;c=b.next()){c=c.value;var d=a.options[c].default;void 0!==d&&(this.j[c]="function"===typeof d?d():d);}}}x=Gc.prototype;x.close=function(){this.i&&this.i.delete();return Promise.resolve()};
    function Hc(a){var b,c,d,e,g,f,h,k,l,m,q;return J(function(p){switch(p.g){case 1:if(!a.Z)return p.return();b=void 0===a.g.files?[]:"function"===typeof a.g.files?a.g.files(a.j):a.g.files;return G(p,Fc(),2);case 2:c=p.h;if("object"===typeof window)return Dc("createMediapipeSolutionsWasm",{locateFile:a.locateFile}),Dc("createMediapipeSolutionsPackedAssets",{locateFile:a.locateFile}),f=b.filter(function(n){return void 0!==n.data}),h=b.filter(function(n){return void 0===n.data}),k=Promise.all(f.map(function(n){var r=
    Ic(a,n.url);if(void 0!==n.path){var t=n.path;r=r.then(function(w){a.overrideFile(t,w);return Promise.resolve(w)});}return r})),l=Promise.all(h.map(function(n){return void 0===n.simd||n.simd&&c||!n.simd&&!c?Ec(a.locateFile(n.url,a.$)):Promise.resolve()})).then(function(){var n,r,t;return J(function(w){if(1==w.g)return n=window.createMediapipeSolutionsWasm,r=window.createMediapipeSolutionsPackedAssets,t=a,G(w,n(r),2);t.h=w.h;w.g=0;})}),m=function(){return J(function(n){a.g.graph&&a.g.graph.url?n=G(n,
    Ic(a,a.g.graph.url),0):(n.g=0,n=void 0);return n})}(),G(p,Promise.all([l,k,m]),7);if("function"!==typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");d=b.filter(function(n){return void 0===n.simd||n.simd&&c||!n.simd&&!c}).map(function(n){return a.locateFile(n.url,a.$)});importScripts.apply(null,D(d));e=a;return G(p,createMediapipeSolutionsWasm(Module),6);case 6:e.h=p.h;a.l=new OffscreenCanvas(1,1);a.h.canvas=a.l;g=a.h.GL.createContext(a.l,{antialias:!1,
    alpha:!1,ja:"undefined"!==typeof WebGL2RenderingContext?2:1});a.h.GL.makeContextCurrent(g);p.g=4;break;case 7:a.l=document.createElement("canvas");q=a.l.getContext("webgl2",{});if(!q&&(q=a.l.getContext("webgl",{}),!q))return alert("Failed to create WebGL canvas context when passing video frame."),p.return();a.G=q;a.h.canvas=a.l;a.h.createContext(a.l,!0,!0,{});case 4:a.i=new a.h.SolutionWasm,a.Z=!1,p.g=0;}})}
    function Jc(a){var b,c,d,e,g,f,h,k;return J(function(l){if(1==l.g){if(a.g.graph&&a.g.graph.url&&a.Y===a.g.graph.url)return l.return();a.s=!0;if(!a.g.graph||!a.g.graph.url){l.g=2;return}a.Y=a.g.graph.url;return G(l,Ic(a,a.g.graph.url),3)}2!=l.g&&(b=l.h,a.i.loadGraph(b));c=C(Object.keys(a.C));for(d=c.next();!d.done;d=c.next())e=d.value,a.i.overrideFile(e,a.C[e]);a.C={};if(a.g.listeners)for(g=C(a.g.listeners),f=g.next();!f.done;f=g.next())h=f.value,Kc(a,h);k=a.j;a.j={};a.setOptions(k);l.g=0;})}
    x.reset=function(){var a=this;return J(function(b){a.i&&(a.i.reset(),a.o={},a.u={});b.g=0;})};
    x.setOptions=function(a,b){var c=this;if(b=b||this.g.options){for(var d=[],e=[],g={},f=C(Object.keys(a)),h=f.next();!h.done;g={R:g.R,S:g.S},h=f.next()){var k=h.value;k in this.j&&this.j[k]===a[k]||(this.j[k]=a[k],h=b[k],void 0!==h&&(h.onChange&&(g.R=h.onChange,g.S=a[k],d.push(function(l){return function(){var m;return J(function(q){if(1==q.g)return G(q,l.R(l.S),2);m=q.h;!0===m&&(c.s=!0);q.g=0;})}}(g))),h.graphOptionXref&&(k={valueNumber:1===h.type?a[k]:0,valueBoolean:0===h.type?a[k]:!1,valueString:2===
    h.type?a[k]:""},h=Object.assign(Object.assign(Object.assign({},{calculatorName:"",calculatorIndex:0}),h.graphOptionXref),k),e.push(h))));}if(0!==d.length||0!==e.length)this.s=!0,this.B=(void 0===this.B?[]:this.B).concat(e),this.A=(void 0===this.A?[]:this.A).concat(d);}};
    function Lc(a){var b,c,d,e,g,f,h;return J(function(k){switch(k.g){case 1:if(!a.s)return k.return();if(!a.A){k.g=2;break}b=C(a.A);c=b.next();case 3:if(c.done){k.g=5;break}d=c.value;return G(k,d(),4);case 4:c=b.next();k.g=3;break;case 5:a.A=void 0;case 2:if(a.B){e=new a.h.GraphOptionChangeRequestList;g=C(a.B);for(f=g.next();!f.done;f=g.next())h=f.value,e.push_back(h);a.i.changeOptions(e);e.delete();a.B=void 0;}a.s=!1;k.g=0;}})}
    x.initialize=function(){var a=this;return J(function(b){return 1==b.g?G(b,Hc(a),2):3!=b.g?G(b,Jc(a),3):G(b,Lc(a),0)})};function Ic(a,b){var c,d;return J(function(e){if(b in a.H)return e.return(a.H[b]);c=a.locateFile(b,"");d=fetch(c).then(function(g){return g.arrayBuffer()});a.H[b]=d;return e.return(d)})}x.overrideFile=function(a,b){this.i?this.i.overrideFile(a,b):this.C[a]=b;};x.clearOverriddenFiles=function(){this.C={};this.i&&this.i.clearOverriddenFiles();};
    x.send=function(a,b){var c=this,d,e,g,f,h,k,l,m,q;return J(function(p){switch(p.g){case 1:if(!c.g.inputs)return p.return();d=1E3*(void 0===b||null===b?performance.now():b);return G(p,c.D,2);case 2:return G(p,c.initialize(),3);case 3:e=new c.h.PacketDataList;g=C(Object.keys(a));for(f=g.next();!f.done;f=g.next())if(h=f.value,k=c.g.inputs[h]){a:{var n=a[h];switch(k.type){case "video":var r=c.o[k.stream];r||(r=new xc(c.h,c.G),c.o[k.stream]=r);0===r.l&&(r.l=r.h.createTexture());if("undefined"!==typeof HTMLVideoElement&&
    n instanceof HTMLVideoElement){var t=n.videoWidth;var w=n.videoHeight;}else "undefined"!==typeof HTMLImageElement&&n instanceof HTMLImageElement?(t=n.naturalWidth,w=n.naturalHeight):(t=n.width,w=n.height);w={glName:r.l,width:t,height:w};t=r.g;t.canvas.width=w.width;t.canvas.height=w.height;t.activeTexture(t.TEXTURE0);r.h.bindTexture2d(r.l);t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n);r.h.bindTexture2d(0);r=w;break a;case "detections":r=c.o[k.stream];r||(r=new Ac(c.h),c.o[k.stream]=r);
    r.data||(r.data=new r.g.DetectionListData);r.data.reset(n.length);for(w=0;w<n.length;++w){t=n[w];var v=r.data,A=v.setBoundingBox,I=w;var F=t.boundingBox;var u=new lc;W(u,1,F.xCenter);W(u,2,F.yCenter);W(u,3,F.height);W(u,4,F.width);W(u,5,F.rotation);W(u,6,F.rectId);F=Vb(u,mc);A.call(v,I,F);if(t.landmarks)for(v=0;v<t.landmarks.length;++v){u=t.landmarks[v];var z=u.visibility?!0:!1;A=r.data;I=A.addNormalizedLandmark;F=w;u=Object.assign(Object.assign({},u),{visibility:z?u.visibility:0});z=new gc;W(z,1,
    u.x);W(z,2,u.y);W(z,3,u.z);u.visibility&&W(z,4,u.visibility);u=Vb(z,hc);I.call(A,F,u);}if(t.V)for(v=0;v<t.V.length;++v)A=r.data,I=A.addClassification,F=w,u=t.V[v],z=new bc,W(z,2,u.ga),u.index&&W(z,1,u.index),u.label&&W(z,3,u.label),u.displayName&&W(z,4,u.displayName),u=Vb(z,cc),I.call(A,F,u);}r=r.data;break a;default:r={};}}l=r;m=k.stream;switch(k.type){case "video":e.pushTexture2d(Object.assign(Object.assign({},l),{stream:m,timestamp:d}));break;case "detections":q=l;q.stream=m;q.timestamp=d;e.pushDetectionList(q);
    break;default:throw Error("Unknown input config type: '"+k.type+"'");}}c.i.send(e);return G(p,c.D,4);case 4:e.delete(),p.g=0;}})};
    function Mc(a,b,c){var d,e,g,f,h,k,l,m,q,p,n,r,t,w;return J(function(v){switch(v.g){case 1:if(!c)return v.return(b);d={};e=0;g=C(Object.keys(c));for(f=g.next();!f.done;f=g.next())h=f.value,k=c[h],"string"!==typeof k&&"texture"===k.type&&void 0!==b[k.stream]&&++e;1<e&&(a.I=!1);l=C(Object.keys(c));f=l.next();case 2:if(f.done){v.g=4;break}m=f.value;q=c[m];if("string"===typeof q)return t=d,w=m,G(v,Nc(a,m,b[q]),14);p=b[q.stream];if("detection_list"===q.type){if(p){var A=p.getRectList();for(var I=p.getLandmarksList(),
    F=p.getClassificationsList(),u=[],z=0;z<A.size();++z){var R=Ub(A.get(z),lc,mc);R={boundingBox:{xCenter:X(R,1),yCenter:X(R,2),height:X(R,3),width:X(R,4),rotation:X(R,5,0),rectId:kb(R,6)},landmarks:ib(Ub(I.get(z),ic,kc),gc,1).map(wc),V:vc(Ub(F.get(z),dc,fc))};u.push(R);}A=u;}else A=[];d[m]=A;v.g=7;break}if("proto_list"===q.type){if(p){A=Array(p.size());for(I=0;I<p.size();I++)A[I]=p.get(I);p.delete();}else A=[];d[m]=A;v.g=7;break}if(void 0===p){v.g=3;break}if("float_list"===q.type){d[m]=p;v.g=7;break}if("proto"===
    q.type){d[m]=p;v.g=7;break}if("texture"!==q.type)throw Error("Unknown output config type: '"+q.type+"'");n=a.u[m];n||(n=new xc(a.h,a.G),a.u[m]=n);return G(v,yc(n,p,a.I),13);case 13:r=v.h,d[m]=r;case 7:q.transform&&d[m]&&(d[m]=q.transform(d[m]));v.g=3;break;case 14:t[w]=v.h;case 3:f=l.next();v.g=2;break;case 4:return v.return(d)}})}
    function Nc(a,b,c){var d;return J(function(e){return "number"===typeof c||c instanceof Uint8Array||c instanceof a.h.Uint8BlobList?e.return(c):c instanceof a.h.Texture2dDataOut?(d=a.u[b],d||(d=new xc(a.h,a.G),a.u[b]=d),e.return(yc(d,c,a.I))):e.return(void 0)})}
    function Kc(a,b){for(var c=b.name||"$",d=[].concat(D(b.wants)),e=new a.h.StringList,g=C(b.wants),f=g.next();!f.done;f=g.next())e.push_back(f.value);g=a.h.PacketListener.implement({onResults:function(h){for(var k={},l=0;l<b.wants.length;++l)k[d[l]]=h.get(l);var m=a.listeners[c];m&&(a.D=Mc(a,k,b.outs).then(function(q){q=m(q);for(var p=0;p<b.wants.length;++p){var n=k[d[p]];"object"===typeof n&&n.hasOwnProperty&&n.hasOwnProperty("delete")&&n.delete();}q&&(a.D=q);}));}});a.i.attachMultiListener(e,g);e.delete();}
    x.onResults=function(a,b){this.listeners[b||"$"]=a;};K("Solution",Gc);K("OptionType",{BOOL:0,NUMBER:1,ia:2,0:"BOOL",1:"NUMBER",2:"STRING"});function Oc(a){var b=this;a=a||{};var c={url:"face_detection_short.binarypb"},d={type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}};this.g=new Gc({locateFile:a.locateFile,files:[{data:!0,url:"face_detection_short.binarypb"},{data:!0,url:"face_detection_short_range.tflite"},{simd:!0,url:"face_detection_solution_simd_wasm_bin.js"},{simd:!1,url:"face_detection_solution_wasm_bin.js"}],
    graph:c,listeners:[{wants:["detections","image_transformed"],outs:{image:"image_transformed",detections:{type:"detection_list",stream:"detections"}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"object"!==typeof window||void 0===window.navigator?!1:"iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&
    "ontouchend"in document},selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},model:{type:0,onChange:function(e){var g,f,h,k,l,m;return J(function(q){switch(q.g){case 1:g="short"===e?["face_detection_short_range.tflite"]:["face_detection_full_range_sparse.tflite"],f=C(g),h=f.next();case 2:if(h.done){q.g=4;break}k=h.value;l="third_party/mediapipe/modules/face_detection/"+k;return G(q,Ic(b.g,k),5);case 5:m=q.h;b.g.overrideFile(l,m);
    h=f.next();q.g=2;break;case 4:return c.url="short"===e?"face_detection_short.binarypb":"face_detection_full.binarypb",d.graphOptionXref.calculatorName="short"===e?"facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator":"facedetectionfullrangegpu__facedetectionfullrangecommon__TensorsToDetectionsCalculator",q.return(!0)}})}},minDetectionConfidence:d}});}x=Oc.prototype;x.close=function(){this.g.close();return Promise.resolve()};x.onResults=function(a){this.g.onResults(a);};
    x.initialize=function(){var a=this;return J(function(b){return G(b,a.g.initialize(),0)})};x.reset=function(){this.g.reset();};x.send=function(a){var b=this;return J(function(c){return G(c,b.g.send(a),0)})};x.setOptions=function(a){this.g.setOptions(a);};K("FaceDetection",Oc);K("FACEDETECTION_LIPS",nc);K("FACEDETECTION_LEFT_EYE",oc);K("FACEDETECTION_LEFT_EYEBROW",pc);K("FACEDETECTION_RIGHT_EYE",qc);K("FACEDETECTION_RIGHT_EYEBROW",rc);K("FACEDETECTION_FACE_OVAL",sc);K("FACEDETECTION_CONTOURS",tc);
    K("FACEDETECTION_TESSELATION",[[127,34],[34,139],[139,127],[11,0],[0,37],[37,11],[232,231],[231,120],[120,232],[72,37],[37,39],[39,72],[128,121],[121,47],[47,128],[232,121],[121,128],[128,232],[104,69],[69,67],[67,104],[175,171],[171,148],[148,175],[118,50],[50,101],[101,118],[73,39],[39,40],[40,73],[9,151],[151,108],[108,9],[48,115],[115,131],[131,48],[194,204],[204,211],[211,194],[74,40],[40,185],[185,74],[80,42],[42,183],[183,80],[40,92],[92,186],[186,40],[230,229],[229,118],[118,230],[202,212],
    [212,214],[214,202],[83,18],[18,17],[17,83],[76,61],[61,146],[146,76],[160,29],[29,30],[30,160],[56,157],[157,173],[173,56],[106,204],[204,194],[194,106],[135,214],[214,192],[192,135],[203,165],[165,98],[98,203],[21,71],[71,68],[68,21],[51,45],[45,4],[4,51],[144,24],[24,23],[23,144],[77,146],[146,91],[91,77],[205,50],[50,187],[187,205],[201,200],[200,18],[18,201],[91,106],[106,182],[182,91],[90,91],[91,181],[181,90],[85,84],[84,17],[17,85],[206,203],[203,36],[36,206],[148,171],[171,140],[140,148],
    [92,40],[40,39],[39,92],[193,189],[189,244],[244,193],[159,158],[158,28],[28,159],[247,246],[246,161],[161,247],[236,3],[3,196],[196,236],[54,68],[68,104],[104,54],[193,168],[168,8],[8,193],[117,228],[228,31],[31,117],[189,193],[193,55],[55,189],[98,97],[97,99],[99,98],[126,47],[47,100],[100,126],[166,79],[79,218],[218,166],[155,154],[154,26],[26,155],[209,49],[49,131],[131,209],[135,136],[136,150],[150,135],[47,126],[126,217],[217,47],[223,52],[52,53],[53,223],[45,51],[51,134],[134,45],[211,170],
    [170,140],[140,211],[67,69],[69,108],[108,67],[43,106],[106,91],[91,43],[230,119],[119,120],[120,230],[226,130],[130,247],[247,226],[63,53],[53,52],[52,63],[238,20],[20,242],[242,238],[46,70],[70,156],[156,46],[78,62],[62,96],[96,78],[46,53],[53,63],[63,46],[143,34],[34,227],[227,143],[123,117],[117,111],[111,123],[44,125],[125,19],[19,44],[236,134],[134,51],[51,236],[216,206],[206,205],[205,216],[154,153],[153,22],[22,154],[39,37],[37,167],[167,39],[200,201],[201,208],[208,200],[36,142],[142,100],
    [100,36],[57,212],[212,202],[202,57],[20,60],[60,99],[99,20],[28,158],[158,157],[157,28],[35,226],[226,113],[113,35],[160,159],[159,27],[27,160],[204,202],[202,210],[210,204],[113,225],[225,46],[46,113],[43,202],[202,204],[204,43],[62,76],[76,77],[77,62],[137,123],[123,116],[116,137],[41,38],[38,72],[72,41],[203,129],[129,142],[142,203],[64,98],[98,240],[240,64],[49,102],[102,64],[64,49],[41,73],[73,74],[74,41],[212,216],[216,207],[207,212],[42,74],[74,184],[184,42],[169,170],[170,211],[211,169],
    [170,149],[149,176],[176,170],[105,66],[66,69],[69,105],[122,6],[6,168],[168,122],[123,147],[147,187],[187,123],[96,77],[77,90],[90,96],[65,55],[55,107],[107,65],[89,90],[90,180],[180,89],[101,100],[100,120],[120,101],[63,105],[105,104],[104,63],[93,137],[137,227],[227,93],[15,86],[86,85],[85,15],[129,102],[102,49],[49,129],[14,87],[87,86],[86,14],[55,8],[8,9],[9,55],[100,47],[47,121],[121,100],[145,23],[23,22],[22,145],[88,89],[89,179],[179,88],[6,122],[122,196],[196,6],[88,95],[95,96],[96,88],[138,
    172],[172,136],[136,138],[215,58],[58,172],[172,215],[115,48],[48,219],[219,115],[42,80],[80,81],[81,42],[195,3],[3,51],[51,195],[43,146],[146,61],[61,43],[171,175],[175,199],[199,171],[81,82],[82,38],[38,81],[53,46],[46,225],[225,53],[144,163],[163,110],[110,144],[52,65],[65,66],[66,52],[229,228],[228,117],[117,229],[34,127],[127,234],[234,34],[107,108],[108,69],[69,107],[109,108],[108,151],[151,109],[48,64],[64,235],[235,48],[62,78],[78,191],[191,62],[129,209],[209,126],[126,129],[111,35],[35,143],
    [143,111],[117,123],[123,50],[50,117],[222,65],[65,52],[52,222],[19,125],[125,141],[141,19],[221,55],[55,65],[65,221],[3,195],[195,197],[197,3],[25,7],[7,33],[33,25],[220,237],[237,44],[44,220],[70,71],[71,139],[139,70],[122,193],[193,245],[245,122],[247,130],[130,33],[33,247],[71,21],[21,162],[162,71],[170,169],[169,150],[150,170],[188,174],[174,196],[196,188],[216,186],[186,92],[92,216],[2,97],[97,167],[167,2],[141,125],[125,241],[241,141],[164,167],[167,37],[37,164],[72,38],[38,12],[12,72],[38,
    82],[82,13],[13,38],[63,68],[68,71],[71,63],[226,35],[35,111],[111,226],[101,50],[50,205],[205,101],[206,92],[92,165],[165,206],[209,198],[198,217],[217,209],[165,167],[167,97],[97,165],[220,115],[115,218],[218,220],[133,112],[112,243],[243,133],[239,238],[238,241],[241,239],[214,135],[135,169],[169,214],[190,173],[173,133],[133,190],[171,208],[208,32],[32,171],[125,44],[44,237],[237,125],[86,87],[87,178],[178,86],[85,86],[86,179],[179,85],[84,85],[85,180],[180,84],[83,84],[84,181],[181,83],[201,
    83],[83,182],[182,201],[137,93],[93,132],[132,137],[76,62],[62,183],[183,76],[61,76],[76,184],[184,61],[57,61],[61,185],[185,57],[212,57],[57,186],[186,212],[214,207],[207,187],[187,214],[34,143],[143,156],[156,34],[79,239],[239,237],[237,79],[123,137],[137,177],[177,123],[44,1],[1,4],[4,44],[201,194],[194,32],[32,201],[64,102],[102,129],[129,64],[213,215],[215,138],[138,213],[59,166],[166,219],[219,59],[242,99],[99,97],[97,242],[2,94],[94,141],[141,2],[75,59],[59,235],[235,75],[24,110],[110,228],
    [228,24],[25,130],[130,226],[226,25],[23,24],[24,229],[229,23],[22,23],[23,230],[230,22],[26,22],[22,231],[231,26],[112,26],[26,232],[232,112],[189,190],[190,243],[243,189],[221,56],[56,190],[190,221],[28,56],[56,221],[221,28],[27,28],[28,222],[222,27],[29,27],[27,223],[223,29],[30,29],[29,224],[224,30],[247,30],[30,225],[225,247],[238,79],[79,20],[20,238],[166,59],[59,75],[75,166],[60,75],[75,240],[240,60],[147,177],[177,215],[215,147],[20,79],[79,166],[166,20],[187,147],[147,213],[213,187],[112,
    233],[233,244],[244,112],[233,128],[128,245],[245,233],[128,114],[114,188],[188,128],[114,217],[217,174],[174,114],[131,115],[115,220],[220,131],[217,198],[198,236],[236,217],[198,131],[131,134],[134,198],[177,132],[132,58],[58,177],[143,35],[35,124],[124,143],[110,163],[163,7],[7,110],[228,110],[110,25],[25,228],[356,389],[389,368],[368,356],[11,302],[302,267],[267,11],[452,350],[350,349],[349,452],[302,303],[303,269],[269,302],[357,343],[343,277],[277,357],[452,453],[453,357],[357,452],[333,332],
    [332,297],[297,333],[175,152],[152,377],[377,175],[347,348],[348,330],[330,347],[303,304],[304,270],[270,303],[9,336],[336,337],[337,9],[278,279],[279,360],[360,278],[418,262],[262,431],[431,418],[304,408],[408,409],[409,304],[310,415],[415,407],[407,310],[270,409],[409,410],[410,270],[450,348],[348,347],[347,450],[422,430],[430,434],[434,422],[313,314],[314,17],[17,313],[306,307],[307,375],[375,306],[387,388],[388,260],[260,387],[286,414],[414,398],[398,286],[335,406],[406,418],[418,335],[364,367],
    [367,416],[416,364],[423,358],[358,327],[327,423],[251,284],[284,298],[298,251],[281,5],[5,4],[4,281],[373,374],[374,253],[253,373],[307,320],[320,321],[321,307],[425,427],[427,411],[411,425],[421,313],[313,18],[18,421],[321,405],[405,406],[406,321],[320,404],[404,405],[405,320],[315,16],[16,17],[17,315],[426,425],[425,266],[266,426],[377,400],[400,369],[369,377],[322,391],[391,269],[269,322],[417,465],[465,464],[464,417],[386,257],[257,258],[258,386],[466,260],[260,388],[388,466],[456,399],[399,
    419],[419,456],[284,332],[332,333],[333,284],[417,285],[285,8],[8,417],[346,340],[340,261],[261,346],[413,441],[441,285],[285,413],[327,460],[460,328],[328,327],[355,371],[371,329],[329,355],[392,439],[439,438],[438,392],[382,341],[341,256],[256,382],[429,420],[420,360],[360,429],[364,394],[394,379],[379,364],[277,343],[343,437],[437,277],[443,444],[444,283],[283,443],[275,440],[440,363],[363,275],[431,262],[262,369],[369,431],[297,338],[338,337],[337,297],[273,375],[375,321],[321,273],[450,451],
    [451,349],[349,450],[446,342],[342,467],[467,446],[293,334],[334,282],[282,293],[458,461],[461,462],[462,458],[276,353],[353,383],[383,276],[308,324],[324,325],[325,308],[276,300],[300,293],[293,276],[372,345],[345,447],[447,372],[352,345],[345,340],[340,352],[274,1],[1,19],[19,274],[456,248],[248,281],[281,456],[436,427],[427,425],[425,436],[381,256],[256,252],[252,381],[269,391],[391,393],[393,269],[200,199],[199,428],[428,200],[266,330],[330,329],[329,266],[287,273],[273,422],[422,287],[250,462],
    [462,328],[328,250],[258,286],[286,384],[384,258],[265,353],[353,342],[342,265],[387,259],[259,257],[257,387],[424,431],[431,430],[430,424],[342,353],[353,276],[276,342],[273,335],[335,424],[424,273],[292,325],[325,307],[307,292],[366,447],[447,345],[345,366],[271,303],[303,302],[302,271],[423,266],[266,371],[371,423],[294,455],[455,460],[460,294],[279,278],[278,294],[294,279],[271,272],[272,304],[304,271],[432,434],[434,427],[427,432],[272,407],[407,408],[408,272],[394,430],[430,431],[431,394],[395,
    369],[369,400],[400,395],[334,333],[333,299],[299,334],[351,417],[417,168],[168,351],[352,280],[280,411],[411,352],[325,319],[319,320],[320,325],[295,296],[296,336],[336,295],[319,403],[403,404],[404,319],[330,348],[348,349],[349,330],[293,298],[298,333],[333,293],[323,454],[454,447],[447,323],[15,16],[16,315],[315,15],[358,429],[429,279],[279,358],[14,15],[15,316],[316,14],[285,336],[336,9],[9,285],[329,349],[349,350],[350,329],[374,380],[380,252],[252,374],[318,402],[402,403],[403,318],[6,197],
    [197,419],[419,6],[318,319],[319,325],[325,318],[367,364],[364,365],[365,367],[435,367],[367,397],[397,435],[344,438],[438,439],[439,344],[272,271],[271,311],[311,272],[195,5],[5,281],[281,195],[273,287],[287,291],[291,273],[396,428],[428,199],[199,396],[311,271],[271,268],[268,311],[283,444],[444,445],[445,283],[373,254],[254,339],[339,373],[282,334],[334,296],[296,282],[449,347],[347,346],[346,449],[264,447],[447,454],[454,264],[336,296],[296,299],[299,336],[338,10],[10,151],[151,338],[278,439],
    [439,455],[455,278],[292,407],[407,415],[415,292],[358,371],[371,355],[355,358],[340,345],[345,372],[372,340],[346,347],[347,280],[280,346],[442,443],[443,282],[282,442],[19,94],[94,370],[370,19],[441,442],[442,295],[295,441],[248,419],[419,197],[197,248],[263,255],[255,359],[359,263],[440,275],[275,274],[274,440],[300,383],[383,368],[368,300],[351,412],[412,465],[465,351],[263,467],[467,466],[466,263],[301,368],[368,389],[389,301],[395,378],[378,379],[379,395],[412,351],[351,419],[419,412],[436,
    426],[426,322],[322,436],[2,164],[164,393],[393,2],[370,462],[462,461],[461,370],[164,0],[0,267],[267,164],[302,11],[11,12],[12,302],[268,12],[12,13],[13,268],[293,300],[300,301],[301,293],[446,261],[261,340],[340,446],[330,266],[266,425],[425,330],[426,423],[423,391],[391,426],[429,355],[355,437],[437,429],[391,327],[327,326],[326,391],[440,457],[457,438],[438,440],[341,382],[382,362],[362,341],[459,457],[457,461],[461,459],[434,430],[430,394],[394,434],[414,463],[463,362],[362,414],[396,369],[369,
    262],[262,396],[354,461],[461,457],[457,354],[316,403],[403,402],[402,316],[315,404],[404,403],[403,315],[314,405],[405,404],[404,314],[313,406],[406,405],[405,313],[421,418],[418,406],[406,421],[366,401],[401,361],[361,366],[306,408],[408,407],[407,306],[291,409],[409,408],[408,291],[287,410],[410,409],[409,287],[432,436],[436,410],[410,432],[434,416],[416,411],[411,434],[264,368],[368,383],[383,264],[309,438],[438,457],[457,309],[352,376],[376,401],[401,352],[274,275],[275,4],[4,274],[421,428],
    [428,262],[262,421],[294,327],[327,358],[358,294],[433,416],[416,367],[367,433],[289,455],[455,439],[439,289],[462,370],[370,326],[326,462],[2,326],[326,370],[370,2],[305,460],[460,455],[455,305],[254,449],[449,448],[448,254],[255,261],[261,446],[446,255],[253,450],[450,449],[449,253],[252,451],[451,450],[450,252],[256,452],[452,451],[451,256],[341,453],[453,452],[452,341],[413,464],[464,463],[463,413],[441,413],[413,414],[414,441],[258,442],[442,441],[441,258],[257,443],[443,442],[442,257],[259,
    444],[444,443],[443,259],[260,445],[445,444],[444,260],[467,342],[342,445],[445,467],[459,458],[458,250],[250,459],[289,392],[392,290],[290,289],[290,328],[328,460],[460,290],[376,433],[433,435],[435,376],[250,290],[290,392],[392,250],[411,416],[416,433],[433,411],[341,463],[463,464],[464,341],[453,464],[464,465],[465,453],[357,465],[465,412],[412,357],[343,412],[412,399],[399,343],[360,363],[363,440],[440,360],[437,399],[399,456],[456,437],[420,456],[456,363],[363,420],[401,435],[435,288],[288,401],
    [372,383],[383,353],[353,372],[339,255],[255,249],[249,339],[448,261],[261,255],[255,448],[133,243],[243,190],[190,133],[133,155],[155,112],[112,133],[33,246],[246,247],[247,33],[33,130],[130,25],[25,33],[398,384],[384,286],[286,398],[362,398],[398,414],[414,362],[362,463],[463,341],[341,362],[263,359],[359,467],[467,263],[263,249],[249,255],[255,263],[466,467],[467,260],[260,466],[75,60],[60,166],[166,75],[238,239],[239,79],[79,238],[162,127],[127,139],[139,162],[72,11],[11,37],[37,72],[121,232],
    [232,120],[120,121],[73,72],[72,39],[39,73],[114,128],[128,47],[47,114],[233,232],[232,128],[128,233],[103,104],[104,67],[67,103],[152,175],[175,148],[148,152],[119,118],[118,101],[101,119],[74,73],[73,40],[40,74],[107,9],[9,108],[108,107],[49,48],[48,131],[131,49],[32,194],[194,211],[211,32],[184,74],[74,185],[185,184],[191,80],[80,183],[183,191],[185,40],[40,186],[186,185],[119,230],[230,118],[118,119],[210,202],[202,214],[214,210],[84,83],[83,17],[17,84],[77,76],[76,146],[146,77],[161,160],[160,
    30],[30,161],[190,56],[56,173],[173,190],[182,106],[106,194],[194,182],[138,135],[135,192],[192,138],[129,203],[203,98],[98,129],[54,21],[21,68],[68,54],[5,51],[51,4],[4,5],[145,144],[144,23],[23,145],[90,77],[77,91],[91,90],[207,205],[205,187],[187,207],[83,201],[201,18],[18,83],[181,91],[91,182],[182,181],[180,90],[90,181],[181,180],[16,85],[85,17],[17,16],[205,206],[206,36],[36,205],[176,148],[148,140],[140,176],[165,92],[92,39],[39,165],[245,193],[193,244],[244,245],[27,159],[159,28],[28,27],
    [30,247],[247,161],[161,30],[174,236],[236,196],[196,174],[103,54],[54,104],[104,103],[55,193],[193,8],[8,55],[111,117],[117,31],[31,111],[221,189],[189,55],[55,221],[240,98],[98,99],[99,240],[142,126],[126,100],[100,142],[219,166],[166,218],[218,219],[112,155],[155,26],[26,112],[198,209],[209,131],[131,198],[169,135],[135,150],[150,169],[114,47],[47,217],[217,114],[224,223],[223,53],[53,224],[220,45],[45,134],[134,220],[32,211],[211,140],[140,32],[109,67],[67,108],[108,109],[146,43],[43,91],[91,
    146],[231,230],[230,120],[120,231],[113,226],[226,247],[247,113],[105,63],[63,52],[52,105],[241,238],[238,242],[242,241],[124,46],[46,156],[156,124],[95,78],[78,96],[96,95],[70,46],[46,63],[63,70],[116,143],[143,227],[227,116],[116,123],[123,111],[111,116],[1,44],[44,19],[19,1],[3,236],[236,51],[51,3],[207,216],[216,205],[205,207],[26,154],[154,22],[22,26],[165,39],[39,167],[167,165],[199,200],[200,208],[208,199],[101,36],[36,100],[100,101],[43,57],[57,202],[202,43],[242,20],[20,99],[99,242],[56,
    28],[28,157],[157,56],[124,35],[35,113],[113,124],[29,160],[160,27],[27,29],[211,204],[204,210],[210,211],[124,113],[113,46],[46,124],[106,43],[43,204],[204,106],[96,62],[62,77],[77,96],[227,137],[137,116],[116,227],[73,41],[41,72],[72,73],[36,203],[203,142],[142,36],[235,64],[64,240],[240,235],[48,49],[49,64],[64,48],[42,41],[41,74],[74,42],[214,212],[212,207],[207,214],[183,42],[42,184],[184,183],[210,169],[169,211],[211,210],[140,170],[170,176],[176,140],[104,105],[105,69],[69,104],[193,122],[122,
    168],[168,193],[50,123],[123,187],[187,50],[89,96],[96,90],[90,89],[66,65],[65,107],[107,66],[179,89],[89,180],[180,179],[119,101],[101,120],[120,119],[68,63],[63,104],[104,68],[234,93],[93,227],[227,234],[16,15],[15,85],[85,16],[209,129],[129,49],[49,209],[15,14],[14,86],[86,15],[107,55],[55,9],[9,107],[120,100],[100,121],[121,120],[153,145],[145,22],[22,153],[178,88],[88,179],[179,178],[197,6],[6,196],[196,197],[89,88],[88,96],[96,89],[135,138],[138,136],[136,135],[138,215],[215,172],[172,138],
    [218,115],[115,219],[219,218],[41,42],[42,81],[81,41],[5,195],[195,51],[51,5],[57,43],[43,61],[61,57],[208,171],[171,199],[199,208],[41,81],[81,38],[38,41],[224,53],[53,225],[225,224],[24,144],[144,110],[110,24],[105,52],[52,66],[66,105],[118,229],[229,117],[117,118],[227,34],[34,234],[234,227],[66,107],[107,69],[69,66],[10,109],[109,151],[151,10],[219,48],[48,235],[235,219],[183,62],[62,191],[191,183],[142,129],[129,126],[126,142],[116,111],[111,143],[143,116],[118,117],[117,50],[50,118],[223,222],
    [222,52],[52,223],[94,19],[19,141],[141,94],[222,221],[221,65],[65,222],[196,3],[3,197],[197,196],[45,220],[220,44],[44,45],[156,70],[70,139],[139,156],[188,122],[122,245],[245,188],[139,71],[71,162],[162,139],[149,170],[170,150],[150,149],[122,188],[188,196],[196,122],[206,216],[216,92],[92,206],[164,2],[2,167],[167,164],[242,141],[141,241],[241,242],[0,164],[164,37],[37,0],[11,72],[72,12],[12,11],[12,38],[38,13],[13,12],[70,63],[63,71],[71,70],[31,226],[226,111],[111,31],[36,101],[101,205],[205,
    36],[203,206],[206,165],[165,203],[126,209],[209,217],[217,126],[98,165],[165,97],[97,98],[237,220],[220,218],[218,237],[237,239],[239,241],[241,237],[210,214],[214,169],[169,210],[140,171],[171,32],[32,140],[241,125],[125,237],[237,241],[179,86],[86,178],[178,179],[180,85],[85,179],[179,180],[181,84],[84,180],[180,181],[182,83],[83,181],[181,182],[194,201],[201,182],[182,194],[177,137],[137,132],[132,177],[184,76],[76,183],[183,184],[185,61],[61,184],[184,185],[186,57],[57,185],[185,186],[216,212],
    [212,186],[186,216],[192,214],[214,187],[187,192],[139,34],[34,156],[156,139],[218,79],[79,237],[237,218],[147,123],[123,177],[177,147],[45,44],[44,4],[4,45],[208,201],[201,32],[32,208],[98,64],[64,129],[129,98],[192,213],[213,138],[138,192],[235,59],[59,219],[219,235],[141,242],[242,97],[97,141],[97,2],[2,141],[141,97],[240,75],[75,235],[235,240],[229,24],[24,228],[228,229],[31,25],[25,226],[226,31],[230,23],[23,229],[229,230],[231,22],[22,230],[230,231],[232,26],[26,231],[231,232],[233,112],[112,
    232],[232,233],[244,189],[189,243],[243,244],[189,221],[221,190],[190,189],[222,28],[28,221],[221,222],[223,27],[27,222],[222,223],[224,29],[29,223],[223,224],[225,30],[30,224],[224,225],[113,247],[247,225],[225,113],[99,60],[60,240],[240,99],[213,147],[147,215],[215,213],[60,20],[20,166],[166,60],[192,187],[187,213],[213,192],[243,112],[112,244],[244,243],[244,233],[233,245],[245,244],[245,128],[128,188],[188,245],[188,114],[114,174],[174,188],[134,131],[131,220],[220,134],[174,217],[217,236],[236,
    174],[236,198],[198,134],[134,236],[215,177],[177,58],[58,215],[156,143],[143,124],[124,156],[25,110],[110,7],[7,25],[31,228],[228,25],[25,31],[264,356],[356,368],[368,264],[0,11],[11,267],[267,0],[451,452],[452,349],[349,451],[267,302],[302,269],[269,267],[350,357],[357,277],[277,350],[350,452],[452,357],[357,350],[299,333],[333,297],[297,299],[396,175],[175,377],[377,396],[280,347],[347,330],[330,280],[269,303],[303,270],[270,269],[151,9],[9,337],[337,151],[344,278],[278,360],[360,344],[424,418],
    [418,431],[431,424],[270,304],[304,409],[409,270],[272,310],[310,407],[407,272],[322,270],[270,410],[410,322],[449,450],[450,347],[347,449],[432,422],[422,434],[434,432],[18,313],[313,17],[17,18],[291,306],[306,375],[375,291],[259,387],[387,260],[260,259],[424,335],[335,418],[418,424],[434,364],[364,416],[416,434],[391,423],[423,327],[327,391],[301,251],[251,298],[298,301],[275,281],[281,4],[4,275],[254,373],[373,253],[253,254],[375,307],[307,321],[321,375],[280,425],[425,411],[411,280],[200,421],
    [421,18],[18,200],[335,321],[321,406],[406,335],[321,320],[320,405],[405,321],[314,315],[315,17],[17,314],[423,426],[426,266],[266,423],[396,377],[377,369],[369,396],[270,322],[322,269],[269,270],[413,417],[417,464],[464,413],[385,386],[386,258],[258,385],[248,456],[456,419],[419,248],[298,284],[284,333],[333,298],[168,417],[417,8],[8,168],[448,346],[346,261],[261,448],[417,413],[413,285],[285,417],[326,327],[327,328],[328,326],[277,355],[355,329],[329,277],[309,392],[392,438],[438,309],[381,382],
    [382,256],[256,381],[279,429],[429,360],[360,279],[365,364],[364,379],[379,365],[355,277],[277,437],[437,355],[282,443],[443,283],[283,282],[281,275],[275,363],[363,281],[395,431],[431,369],[369,395],[299,297],[297,337],[337,299],[335,273],[273,321],[321,335],[348,450],[450,349],[349,348],[359,446],[446,467],[467,359],[283,293],[293,282],[282,283],[250,458],[458,462],[462,250],[300,276],[276,383],[383,300],[292,308],[308,325],[325,292],[283,276],[276,293],[293,283],[264,372],[372,447],[447,264],[346,
    352],[352,340],[340,346],[354,274],[274,19],[19,354],[363,456],[456,281],[281,363],[426,436],[436,425],[425,426],[380,381],[381,252],[252,380],[267,269],[269,393],[393,267],[421,200],[200,428],[428,421],[371,266],[266,329],[329,371],[432,287],[287,422],[422,432],[290,250],[250,328],[328,290],[385,258],[258,384],[384,385],[446,265],[265,342],[342,446],[386,387],[387,257],[257,386],[422,424],[424,430],[430,422],[445,342],[342,276],[276,445],[422,273],[273,424],[424,422],[306,292],[292,307],[307,306],
    [352,366],[366,345],[345,352],[268,271],[271,302],[302,268],[358,423],[423,371],[371,358],[327,294],[294,460],[460,327],[331,279],[279,294],[294,331],[303,271],[271,304],[304,303],[436,432],[432,427],[427,436],[304,272],[272,408],[408,304],[395,394],[394,431],[431,395],[378,395],[395,400],[400,378],[296,334],[334,299],[299,296],[6,351],[351,168],[168,6],[376,352],[352,411],[411,376],[307,325],[325,320],[320,307],[285,295],[295,336],[336,285],[320,319],[319,404],[404,320],[329,330],[330,349],[349,
    329],[334,293],[293,333],[333,334],[366,323],[323,447],[447,366],[316,15],[15,315],[315,316],[331,358],[358,279],[279,331],[317,14],[14,316],[316,317],[8,285],[285,9],[9,8],[277,329],[329,350],[350,277],[253,374],[374,252],[252,253],[319,318],[318,403],[403,319],[351,6],[6,419],[419,351],[324,318],[318,325],[325,324],[397,367],[367,365],[365,397],[288,435],[435,397],[397,288],[278,344],[344,439],[439,278],[310,272],[272,311],[311,310],[248,195],[195,281],[281,248],[375,273],[273,291],[291,375],[175,
    396],[396,199],[199,175],[312,311],[311,268],[268,312],[276,283],[283,445],[445,276],[390,373],[373,339],[339,390],[295,282],[282,296],[296,295],[448,449],[449,346],[346,448],[356,264],[264,454],[454,356],[337,336],[336,299],[299,337],[337,338],[338,151],[151,337],[294,278],[278,455],[455,294],[308,292],[292,415],[415,308],[429,358],[358,355],[355,429],[265,340],[340,372],[372,265],[352,346],[346,280],[280,352],[295,442],[442,282],[282,295],[354,19],[19,370],[370,354],[285,441],[441,295],[295,285],
    [195,248],[248,197],[197,195],[457,440],[440,274],[274,457],[301,300],[300,368],[368,301],[417,351],[351,465],[465,417],[251,301],[301,389],[389,251],[394,395],[395,379],[379,394],[399,412],[412,419],[419,399],[410,436],[436,322],[322,410],[326,2],[2,393],[393,326],[354,370],[370,461],[461,354],[393,164],[164,267],[267,393],[268,302],[302,12],[12,268],[312,268],[268,13],[13,312],[298,293],[293,301],[301,298],[265,446],[446,340],[340,265],[280,330],[330,425],[425,280],[322,426],[426,391],[391,322],
    [420,429],[429,437],[437,420],[393,391],[391,326],[326,393],[344,440],[440,438],[438,344],[458,459],[459,461],[461,458],[364,434],[434,394],[394,364],[428,396],[396,262],[262,428],[274,354],[354,457],[457,274],[317,316],[316,402],[402,317],[316,315],[315,403],[403,316],[315,314],[314,404],[404,315],[314,313],[313,405],[405,314],[313,421],[421,406],[406,313],[323,366],[366,361],[361,323],[292,306],[306,407],[407,292],[306,291],[291,408],[408,306],[291,287],[287,409],[409,291],[287,432],[432,410],[410,
    287],[427,434],[434,411],[411,427],[372,264],[264,383],[383,372],[459,309],[309,457],[457,459],[366,352],[352,401],[401,366],[1,274],[274,4],[4,1],[418,421],[421,262],[262,418],[331,294],[294,358],[358,331],[435,433],[433,367],[367,435],[392,289],[289,439],[439,392],[328,462],[462,326],[326,328],[94,2],[2,370],[370,94],[289,305],[305,455],[455,289],[339,254],[254,448],[448,339],[359,255],[255,446],[446,359],[254,253],[253,449],[449,254],[253,252],[252,450],[450,253],[252,256],[256,451],[451,252],
    [256,341],[341,452],[452,256],[414,413],[413,463],[463,414],[286,441],[441,414],[414,286],[286,258],[258,441],[441,286],[258,257],[257,442],[442,258],[257,259],[259,443],[443,257],[259,260],[260,444],[444,259],[260,467],[467,445],[445,260],[309,459],[459,250],[250,309],[305,289],[289,290],[290,305],[305,290],[290,460],[460,305],[401,376],[376,435],[435,401],[309,250],[250,392],[392,309],[376,411],[411,433],[433,376],[453,341],[341,464],[464,453],[357,453],[453,465],[465,357],[343,357],[357,412],[412,
    343],[437,343],[343,399],[399,437],[344,360],[360,440],[440,344],[420,437],[437,456],[456,420],[360,420],[420,363],[363,360],[361,401],[401,288],[288,361],[265,372],[372,353],[353,265],[390,339],[339,249],[249,390],[339,448],[448,255],[255,339]]);K("VERSION","0.4.1646425229");}).call(commonjsGlobal);

    /**
        * @license
        * Copyright 2022 Google LLC. All Rights Reserved.
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        * =============================================================================
        */
    var b=function(){return b=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},b.apply(this,arguments)};function T(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{h(i.next(e));}catch(e){o(e);}}function s(e){try{h(i.throw(e));}catch(e){o(e);}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t);}))).then(a,s);}h((i=i.apply(e,t||[])).next());}))}function C(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a);}catch(e){o=[6,e],i=0;}finally{n=r=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}var O=["rightEye","leftEye","noseTip","mouthCenter","rightEarTragion","leftEarTragion"];var B={modelType:"short",runtime:"mediapipe",maxFaces:1};var z=function(){function i(t){var n=this;this.width=0,this.height=0,this.selfieMode=!1,this.faceDetectorSolution=new face_detection.FaceDetection({locateFile:function(e,n){return t.solutionPath?t.solutionPath.replace(/\/+$/,"")+"/"+e:n+"/"+e}}),this.faceDetectorSolution.setOptions({selfieMode:this.selfieMode,model:t.modelType}),this.faceDetectorSolution.onResults((function(e){if(n.height=e.image.height,n.width=e.image.width,n.faces=[],null!==e.detections)for(var t=0,i=e.detections;t<i.length;t++){var r=i[t];n.faces.push(n.normalizedToAbsolute(r.landmarks,(o=r.boundingBox,a=void 0,s=void 0,h=void 0,a=o.xCenter-o.width/2,s=a+o.width,h=o.yCenter-o.height/2,{xMin:a,xMax:s,yMin:h,yMax:h+o.height,width:o.width,height:o.height})));}var o,a,s,h;}));}return i.prototype.normalizedToAbsolute=function(e,t){var n=this;return {keypoints:e.map((function(e,t){return {x:e.x*n.width,y:e.y*n.height,name:O[t]}})),box:{xMin:t.xMin*this.width,yMin:t.yMin*this.height,xMax:t.xMax*this.width,yMax:t.yMax*this.height,width:t.width*this.width,height:t.height*this.height}}},i.prototype.estimateFaces=function(e,i){return T(this,void 0,void 0,(function(){var r,o;return C(this,(function(a){switch(a.label){case 0:return i&&i.flipHorizontal&&i.flipHorizontal!==this.selfieMode&&(this.selfieMode=i.flipHorizontal,this.faceDetectorSolution.setOptions({selfieMode:this.selfieMode})),e instanceof tf.Tensor?(o=ImageData.bind,[4,tf.browser.toPixels(e)]):[3,2];case 1:return r=new(o.apply(ImageData,[void 0,a.sent(),e.shape[1],e.shape[0]])),[3,3];case 2:r=e,a.label=3;case 3:return e=r,[4,this.faceDetectorSolution.send({image:e})];case 4:return a.sent(),[2,this.faces]}}))}))},i.prototype.dispose=function(){this.faceDetectorSolution.close();},i.prototype.reset=function(){this.faceDetectorSolution.reset(),this.width=0,this.height=0,this.faces=null,this.selfieMode=!1;},i.prototype.initialize=function(){return this.faceDetectorSolution.initialize()},i}();function D(e){return T(this,void 0,void 0,(function(){var t,n;return C(this,(function(i){switch(i.label){case 0:return t=function(e){if(null==e)return b({},B);var t=b({},e);return t.runtime="mediapipe",null==t.modelType&&(t.modelType=B.modelType),null==t.maxFaces&&(t.maxFaces=B.maxFaces),t}(e),[4,(n=new z(t)).initialize()];case 1:return i.sent(),[2,n]}}))}))}function A(e,t,n,i){var r=e.width,o=e.height,a=i?-1:1,s=Math.cos(e.rotation),h=Math.sin(e.rotation),u=e.xCenter,c=e.yCenter,l=1/t,f=1/n,d=new Array(16);return d[0]=r*s*a*l,d[1]=-o*h*l,d[2]=0,d[3]=(-.5*r*s*a+.5*o*h+u)*l,d[4]=r*h*a*f,d[5]=o*s*f,d[6]=0,d[7]=(-.5*o*s-.5*r*h*a+c)*f,d[8]=0,d[9]=0,d[10]=r*l,d[11]=0,d[12]=0,d[13]=0,d[14]=0,d[15]=1,function(e){if(16!==e.length)throw new Error("Array length must be 16 but got "+e.length);return [[e[0],e[1],e[2],e[3]],[e[4],e[5],e[6],e[7]],[e[8],e[9],e[10],e[11]],[e[12],e[13],e[14],e[15]]]}(d)}function F(e){return e instanceof tf.Tensor?{height:e.shape[0],width:e.shape[1]}:{height:e.height,width:e.width}}function E(e){return e instanceof tf.Tensor?e:tf.browser.fromPixels(e)}function R(e,t){tf.util.assert(0!==e.width,(function(){return t+" width cannot be 0."})),tf.util.assert(0!==e.height,(function(){return t+" height cannot be 0."}));}function L(e,t){var n=function(e,t,n,i){var r=t-e,o=i-n;if(0===r)throw new Error("Original min and max are both "+e+", range cannot be 0.");var a=o/r;return {scale:a,offset:n-e*a}}(0,255,t[0],t[1]);return tf.tidy((function(){return tf.add(tf.mul(e,n.scale),n.offset)}))}function K(e,t,n){var i=t.outputTensorSize,o=t.keepAspectRatio,a=t.borderMode,l=t.outputTensorFloatRange,f=F(e),d=function(e,t){return t?{xCenter:t.xCenter*e.width,yCenter:t.yCenter*e.height,width:t.width*e.width,height:t.height*e.height,rotation:t.rotation}:{xCenter:.5*e.width,yCenter:.5*e.height,width:e.width,height:e.height,rotation:0}}(f,n),p=function(e,t,n){if(void 0===n&&(n=!1),!n)return {top:0,left:0,right:0,bottom:0};var i=t.height,r=t.width;R(t,"targetSize"),R(e,"roi");var o,a,s=i/r,h=e.height/e.width,u=0,c=0;return s>h?(o=e.width,a=e.width*s,c=(1-h/s)/2):(o=e.height/s,a=e.height,u=(1-s/h)/2),e.width=o,e.height=a,{top:c,left:u,right:u,bottom:c}}(d,i,o),m=A(d,f.width,f.height,!1),x=tf.tidy((function(){var t=E(e),n=tf.tensor2d(function(e,t,n){return R(n,"inputResolution"),[1/n.width*e[0][0]*t.width,1/n.height*e[0][1]*t.width,e[0][3]*t.width,1/n.width*e[1][0]*t.height,1/n.height*e[1][1]*t.height,e[1][3]*t.height,0,0]}(m,f,i),[1,8]),r="zero"===a?"constant":"nearest",o=tf.image.transform(tf.expandDims(tf.cast(t,"float32")),n,"bilinear",r,0,[i.height,i.width]);return null!=l?L(o,l):o}));return {imageTensor:x,padding:p,transformationMatrix:m}}function k(e){null==e.reduceBoxesInLowestLayer&&(e.reduceBoxesInLowestLayer=!1),null==e.interpolatedScaleAspectRatio&&(e.interpolatedScaleAspectRatio=1),null==e.fixedAnchorSize&&(e.fixedAnchorSize=!1);for(var t=[],n=0;n<e.numLayers;){for(var i=[],r=[],o=[],a=[],s=n;s<e.strides.length&&e.strides[s]===e.strides[n];){var h=P(e.minScale,e.maxScale,s,e.strides.length);if(0===s&&e.reduceBoxesInLowestLayer)o.push(1),o.push(2),o.push(.5),a.push(.1),a.push(h),a.push(h);else {for(var u=0;u<e.aspectRatios.length;++u)o.push(e.aspectRatios[u]),a.push(h);if(e.interpolatedScaleAspectRatio>0){var c=s===e.strides.length-1?1:P(e.minScale,e.maxScale,s+1,e.strides.length);a.push(Math.sqrt(h*c)),o.push(e.interpolatedScaleAspectRatio);}}s++;}for(var l=0;l<o.length;++l){var f=Math.sqrt(o[l]);i.push(a[l]/f),r.push(a[l]*f);}var d=0,p=0;if(e.featureMapHeight.length>0)d=e.featureMapHeight[n],p=e.featureMapWidth[n];else {var m=e.strides[n];d=Math.ceil(e.inputSizeHeight/m),p=Math.ceil(e.inputSizeWidth/m);}for(var x=0;x<d;++x)for(var g=0;g<p;++g)for(var y=0;y<i.length;++y){var v={xCenter:(g+e.anchorOffsetX)/p,yCenter:(x+e.anchorOffsetY)/d,width:0,height:0};e.fixedAnchorSize?(v.width=1,v.height=1):(v.width=r[y],v.height=i[y]),t.push(v);}n=s;}return t}function P(e,t,n,i){return 1===i?.5*(e+t):e+(t-e)*n/(i-1)}function V(e,t){var n=t[0],i=t[1];return [n*e[0]+i*e[1]+e[3],n*e[4]+i*e[5]+e[7]]}function H(e){return tf.tidy((function(){var t=function(e){return tf.tidy((function(){return [tf.slice(e,[0,0,0],[1,-1,1]),tf.slice(e,[0,0,1],[1,-1,-1])]}))}(e),n=t[0],i=t[1];return {boxes:tf.squeeze(i),logits:tf.squeeze(n)}}))}function U(e,t,n,i){return T(this,void 0,void 0,(function(){var i,r,o,a,u;return C(this,(function(c){switch(c.label){case 0:return e.sort((function(e,t){return Math.max.apply(Math,t.score)-Math.max.apply(Math,e.score)})),i=tf.tensor2d(e.map((function(e){return [e.locationData.relativeBoundingBox.yMin,e.locationData.relativeBoundingBox.xMin,e.locationData.relativeBoundingBox.yMax,e.locationData.relativeBoundingBox.xMax]}))),r=tf.tensor1d(e.map((function(e){return e.score[0]}))),[4,tf.image.nonMaxSuppressionAsync(i,r,t,n)];case 1:return [4,(o=c.sent()).array()];case 2:return a=c.sent(),u=e.filter((function(e,t){return a.indexOf(t)>-1})),tf.dispose([i,r,o]),[2,u]}}))}))}function j(e,t,n){return T(this,void 0,void 0,(function(){var i,s,h,u,c;return C(this,(function(p){switch(p.label){case 0:return i=e[0],s=e[1],h=function(e,t,n){return tf.tidy((function(){var i,r,s,h;n.reverseOutputOrder?(r=tf.squeeze(tf.slice(e,[0,n.boxCoordOffset+0],[-1,1])),i=tf.squeeze(tf.slice(e,[0,n.boxCoordOffset+1],[-1,1])),h=tf.squeeze(tf.slice(e,[0,n.boxCoordOffset+2],[-1,1])),s=tf.squeeze(tf.slice(e,[0,n.boxCoordOffset+3],[-1,1]))):(i=tf.squeeze(tf.slice(e,[0,n.boxCoordOffset+0],[-1,1])),r=tf.squeeze(tf.slice(e,[0,n.boxCoordOffset+1],[-1,1])),s=tf.squeeze(tf.slice(e,[0,n.boxCoordOffset+2],[-1,1])),h=tf.squeeze(tf.slice(e,[0,n.boxCoordOffset+3],[-1,1]))),r=tf.add(tf.mul(tf.div(r,n.xScale),t.w),t.x),i=tf.add(tf.mul(tf.div(i,n.yScale),t.h),t.y),n.applyExponentialOnBoxSize?(s=tf.mul(tf.exp(tf.div(s,n.hScale)),t.h),h=tf.mul(tf.exp(tf.div(h,n.wScale)),t.w)):(s=tf.mul(tf.div(s,n.hScale),t.h),h=tf.mul(tf.div(h,n.wScale),t.h));var u=tf.sub(i,tf.div(s,2)),c=tf.sub(r,tf.div(h,2)),d=tf.add(i,tf.div(s,2)),p=tf.add(r,tf.div(h,2)),w=tf.concat([tf.reshape(u,[n.numBoxes,1]),tf.reshape(c,[n.numBoxes,1]),tf.reshape(d,[n.numBoxes,1]),tf.reshape(p,[n.numBoxes,1])],1);if(n.numKeypoints)for(var M=0;M<n.numKeypoints;++M){var S=n.keypointCoordOffset+M*n.numValuesPerKeypoint,b=void 0,T=void 0;n.reverseOutputOrder?(b=tf.squeeze(tf.slice(e,[0,S],[-1,1])),T=tf.squeeze(tf.slice(e,[0,S+1],[-1,1]))):(T=tf.squeeze(tf.slice(e,[0,S],[-1,1])),b=tf.squeeze(tf.slice(e,[0,S+1],[-1,1])));var C=tf.add(tf.mul(tf.div(b,n.xScale),t.w),t.x),O=tf.add(tf.mul(tf.div(T,n.yScale),t.h),t.y);w=tf.concat([w,tf.reshape(C,[n.numBoxes,1]),tf.reshape(O,[n.numBoxes,1])],1);}return w}))}(s,t,n),u=tf.tidy((function(){var e=i;return n.sigmoidScore?(null!=n.scoreClippingThresh&&(e=tf.clipByValue(i,-n.scoreClippingThresh,n.scoreClippingThresh)),e=tf.sigmoid(e)):e})),[4,I(h,u,n)];case 1:return c=p.sent(),tf.dispose([h,u]),[2,c]}}))}))}function I(e,t,n){return T(this,void 0,void 0,(function(){var i,r,o,a,s,h,u,c,l,f,d,p;return C(this,(function(m){switch(m.label){case 0:return i=[],[4,e.data()];case 1:return r=m.sent(),[4,t.data()];case 2:for(o=m.sent(),a=0;a<n.numBoxes;++a)if(!(null!=n.minScoreThresh&&o[a]<n.minScoreThresh||(s=a*n.numCoords,h=_(r[s+0],r[s+1],r[s+2],r[s+3],o[a],n.flipVertically,a),(u=h.locationData.relativeBoundingBox).width<0||u.height<0))){if(n.numKeypoints>0)for((c=h.locationData).relativeKeypoints=[],l=n.numKeypoints*n.numValuesPerKeypoint,f=0;f<l;f+=n.numValuesPerKeypoint)d=s+n.keypointCoordOffset+f,p={x:r[d+0],y:n.flipVertically?1-r[d+1]:r[d+1]},c.relativeKeypoints.push(p);i.push(h);}return [2,i]}}))}))}function _(e,t,n,i,r,o,a){return {score:[r],ind:a,locationData:{relativeBoundingBox:{xMin:t,yMin:o?1-n:e,xMax:i,yMax:o?1-e:n,width:i-t,height:n-e}}}}var N={reduceBoxesInLowestLayer:!1,interpolatedScaleAspectRatio:1,featureMapHeight:[],featureMapWidth:[],numLayers:4,minScale:.1484375,maxScale:.75,inputSizeHeight:128,inputSizeWidth:128,anchorOffsetX:.5,anchorOffsetY:.5,strides:[8,16,16,16],aspectRatios:[1],fixedAnchorSize:!0},W={reduceBoxesInLowestLayer:!1,interpolatedScaleAspectRatio:0,featureMapHeight:[],featureMapWidth:[],numLayers:1,minScale:.1484375,maxScale:.75,inputSizeHeight:192,inputSizeWidth:192,anchorOffsetX:.5,anchorOffsetY:.5,strides:[4],aspectRatios:[1],fixedAnchorSize:!0},X={runtime:"tfjs",modelType:"short",maxFaces:1,detectorModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1"},Y={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:896,numCoords:16,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:6,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:128,yScale:128,hScale:128,wScale:128,minScoreThresh:.5},q={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:2304,numCoords:16,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:6,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:192,yScale:192,hScale:192,wScale:192,minScoreThresh:.6},G=.3,$={outputTensorSize:{width:128,height:128},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"},J={outputTensorSize:{width:192,height:192},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"};var Q,Z=function(){function e(e,t,n){this.detectorModel=t,this.maxFaces=n,"full"===e?(this.imageToTensorConfig=J,this.tensorsToDetectionConfig=q,this.anchors=k(W)):(this.imageToTensorConfig=$,this.tensorsToDetectionConfig=Y,this.anchors=k(N));var i=tf.tensor1d(this.anchors.map((function(e){return e.width}))),r=tf.tensor1d(this.anchors.map((function(e){return e.height}))),o=tf.tensor1d(this.anchors.map((function(e){return e.xCenter}))),a=tf.tensor1d(this.anchors.map((function(e){return e.yCenter})));this.anchorTensor={x:o,y:a,w:i,h:r};}return e.prototype.dispose=function(){this.detectorModel.dispose(),tf.dispose([this.anchorTensor.x,this.anchorTensor.y,this.anchorTensor.w,this.anchorTensor.h]);},e.prototype.reset=function(){},e.prototype.detectFaces=function(e,t){return void 0===t&&(t=!1),T(this,void 0,void 0,(function(){var n,i,o,a,s,l,p,m,x,g,y;return C(this,(function(v){switch(v.label){case 0:return null==e?(this.reset(),[2,[]]):(n=tf.tidy((function(){var n=tf.cast(E(e),"float32");if(t){n=tf.squeeze(tf.image.flipLeftRight(tf.expandDims(n,0)),[0]);}return n})),i=K(n,this.imageToTensorConfig),o=i.imageTensor,a=i.transformationMatrix,s=this.detectorModel.execute(o,"Identity:0"),l=H(s),p=l.boxes,[4,j([m=l.logits,p],this.anchorTensor,this.tensorsToDetectionConfig)]);case 1:return 0===(x=v.sent()).length?(tf.dispose([n,o,s,m,p]),[2,x]):[4,U(x,this.maxFaces,G)];case 2:return g=v.sent(),y=function(e,t){void 0===e&&(e=[]);var n,i=(n=t,[].concat.apply([],n));return e.forEach((function(e){var t=e.locationData;t.relativeKeypoints.forEach((function(e){var t=V(i,[e.x,e.y]),n=t[0],r=t[1];e.x=n,e.y=r;}));var n=t.relativeBoundingBox,r=Number.MAX_VALUE,o=Number.MAX_VALUE,a=Number.MIN_VALUE,s=Number.MIN_VALUE;[[n.xMin,n.yMin],[n.xMin+n.width,n.yMin],[n.xMin+n.width,n.yMin+n.height],[n.xMin,n.yMin+n.height]].forEach((function(e){var t=V(i,e),n=t[0],h=t[1];r=Math.min(r,n),a=Math.max(a,n),o=Math.min(o,h),s=Math.max(s,h);})),t.relativeBoundingBox={xMin:r,xMax:a,yMin:o,yMax:s,width:a-r,height:s-o};})),e}(g,a),tf.dispose([n,o,s,m,p]),[2,y]}}))}))},e.prototype.estimateFaces=function(e,t){return T(this,void 0,void 0,(function(){var n,i;return C(this,(function(r){return n=F(e),i=!!t&&t.flipHorizontal,[2,this.detectFaces(e,i).then((function(e){return e.map((function(e){for(var t=e.locationData.relativeKeypoints.map((function(e,t){return b(b({},e),{x:e.x*n.width,y:e.y*n.height,name:O[t]})})),i=e.locationData.relativeBoundingBox,r=0,o=["width","xMax","xMin"];r<o.length;r++){i[o[r]]*=n.width;}for(var a=0,s=["height","yMax","yMin"];a<s.length;a++){i[s[a]]*=n.height;}return {keypoints:t,box:i}}))}))]}))}))},e}();function ee(e){return T(this,void 0,void 0,(function(){var t,n,i;return C(this,(function(r){switch(r.label){case 0:return t=function(e){if(null==e)return b({},X);var t=b({},e);null==t.modelType&&(t.modelType=X.modelType),null==t.maxFaces&&(t.maxFaces=X.maxFaces),null==t.detectorModelUrl&&("full"===t.modelType?t.detectorModelUrl="https://tfhub.dev/mediapipe/tfjs-model/face_detection/full/1":t.detectorModelUrl="https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1");return t}(e),n="string"==typeof t.detectorModelUrl&&t.detectorModelUrl.indexOf("https://tfhub.dev")>-1,[4,tfconv.loadGraphModel(t.detectorModelUrl,{fromTFHub:n})];case 1:return i=r.sent(),[2,new Z(t.modelType,i,t.maxFaces)]}}))}))}function te(e,t){return T(this,void 0,void 0,(function(){var n,i;return C(this,(function(r){if(e===Q.MediaPipeFaceDetector){if(i=void 0,null!=(n=t)){if("tfjs"===n.runtime)return [2,ee(n)];if("mediapipe"===n.runtime)return [2,D(n)];i=n.runtime;}throw new Error("Expect modelConfig.runtime to be either 'tfjs' or 'mediapipe', but got "+i)}throw new Error(e+" is not a supported model name.")}))}))}!function(e){e.MediaPipeFaceDetector="MediaPipeFaceDetector";}(Q||(Q={}));

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function area(rect) {
        return rect.width * rect.height;
    }
    function intersects(rect1, rect2) {
        return !(rect1.xMax < rect2.xMin || rect2.xMax < rect1.xMin ||
            rect1.yMax < rect2.yMin || rect2.yMax < rect1.yMin);
    }
    function intersect(rect1, rect2) {
        var xMin = Math.max(rect1.xMin, rect2.xMin);
        var xMax = Math.min(rect1.xMax, rect2.xMax);
        var yMin = Math.max(rect1.yMin, rect2.yMin);
        var yMax = Math.min(rect1.yMax, rect2.yMax);
        var width = Math.max(xMax - xMin, 0);
        var height = Math.max(yMax - yMin, 0);
        return { xMin: xMin, xMax: xMax, yMin: yMin, yMax: yMax, width: width, height: height };
    }
    function getBoundingBox(rect) {
        var xMin = rect.xCenter - rect.width / 2;
        var xMax = xMin + rect.width;
        var yMin = rect.yCenter - rect.height / 2;
        var yMax = yMin + rect.height;
        return { xMin: xMin, xMax: xMax, yMin: yMin, yMax: yMax, width: rect.width, height: rect.height };
    }
    function overlapSimilarity(rect1, rect2) {
        var bbox1 = getBoundingBox(rect1);
        var bbox2 = getBoundingBox(rect2);
        if (!intersects(bbox1, bbox2)) {
            return 0;
        }
        var intersectionArea = area(intersect(bbox1, bbox2));
        var normalization = area(bbox1) + area(bbox2) - intersectionArea;
        return normalization > 0 ? intersectionArea / normalization : 0;
    }
    // ref:
    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/association_norm_rect_calculator.cc
    // Propgating ids from previous to current is not performed by this code.
    function calculateAssociationNormRect(rectsArray, minSimilarityThreshold) {
        var result = [];
        // rectsArray elements are interpreted to be sorted in reverse priority order,
        // so later elements are higher in priority. This means that if there's a
        // large overlap, the later rect will be added and the older rect will be
        // removed.
        rectsArray.forEach(function (rects) { return rects.forEach(function (curRect) {
            result = result.filter(function (prevRect) {
                return overlapSimilarity(curRect, prevRect) <= minSimilarityThreshold;
            });
            result.push(curRect);
        }); });
        return result;
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Projects normalized landmarks in a rectangle to its original coordinates. The
     * rectangle must also be in normalized coordinates.
     * @param landmarks A normalized Landmark list representing landmarks in a
     *     normalized rectangle.
     * @param inputRect A normalized rectangle.
     * @param config Config object has one field ignoreRotation, default to false.
     */
    // ref:
    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/landmark_projection_calculator.cc
    function calculateLandmarkProjection(landmarks, inputRect, config) {
        if (config === void 0) { config = {
            ignoreRotation: false
        }; }
        var outputLandmarks = [];
        for (var _i = 0, landmarks_1 = landmarks; _i < landmarks_1.length; _i++) {
            var landmark = landmarks_1[_i];
            var x = landmark.x - 0.5;
            var y = landmark.y - 0.5;
            var angle = config.ignoreRotation ? 0 : inputRect.rotation;
            var newX = Math.cos(angle) * x - Math.sin(angle) * y;
            var newY = Math.sin(angle) * x + Math.cos(angle) * y;
            newX = newX * inputRect.width + inputRect.xCenter;
            newY = newY * inputRect.height + inputRect.yCenter;
            var newZ = landmark.z * inputRect.width; // Scale Z coordinate as x.
            var newLandmark = __assign({}, landmark);
            newLandmark.x = newX;
            newLandmark.y = newY;
            newLandmark.z = newZ;
            outputLandmarks.push(newLandmark);
        }
        return outputLandmarks;
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function arrayToMatrix4x4(array) {
        if (array.length !== 16) {
            throw new Error("Array length must be 16 but got " + array.length);
        }
        return [
            [array[0], array[1], array[2], array[3]],
            [array[4], array[5], array[6], array[7]],
            [array[8], array[9], array[10], array[11]],
            [array[12], array[13], array[14], array[15]],
        ];
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Generates a 4x4 projective transform matrix M, so that for any point in the
     * subRect image p(x, y), we can use the matrix to calculate the projected point
     * in the original image p' (x', y'): p' = p * M;
     *
     * @param subRect Rotated sub rect in absolute coordinates.
     * @param rectWidth
     * @param rectHeight
     * @param flipHorizontaly Whether to flip the image horizontally.
     */
    // Ref:
    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/tensor/image_to_tensor_utils.h
    function getRotatedSubRectToRectTransformMatrix(subRect, rectWidth, rectHeight, flipHorizontally) {
        // The resulting matrix is multiplication of below commented out matrices:
        //   postScaleMatrix
        //     * translateMatrix
        //     * rotateMatrix
        //     * flipMatrix
        //     * scaleMatrix
        //     * initialTranslateMatrix
        // For any point in the transformed image p, we can use the above matrix to
        // calculate the projected point in the original image p'. So that:
        // p' = p * M;
        // Note: The transform matrix below assumes image coordinates is normalized
        // to [0, 1] range.
        // Matrix to convert X,Y to [-0.5, 0.5] range "initialTranslateMatrix"
        // [ 1.0,  0.0, 0.0, -0.5]
        // [ 0.0,  1.0, 0.0, -0.5]
        // [ 0.0,  0.0, 1.0,  0.0]
        // [ 0.0,  0.0, 0.0,  1.0]
        var a = subRect.width;
        var b = subRect.height;
        // Matrix to scale X,Y,Z to sub rect "scaleMatrix"
        // Z has the same scale as X.
        // [   a, 0.0, 0.0, 0.0]
        // [0.0,    b, 0.0, 0.0]
        // [0.0, 0.0,    a, 0.0]
        // [0.0, 0.0, 0.0, 1.0]
        var flip = flipHorizontally ? -1 : 1;
        // Matrix for optional horizontal flip around middle of output image.
        // [ fl  , 0.0, 0.0, 0.0]
        // [ 0.0, 1.0, 0.0, 0.0]
        // [ 0.0, 0.0, 1.0, 0.0]
        // [ 0.0, 0.0, 0.0, 1.0]
        var c = Math.cos(subRect.rotation);
        var d = Math.sin(subRect.rotation);
        // Matrix to do rotation around Z axis "rotateMatrix"
        // [    c,   -d, 0.0, 0.0]
        // [    d,    c, 0.0, 0.0]
        // [ 0.0, 0.0, 1.0, 0.0]
        // [ 0.0, 0.0, 0.0, 1.0]
        var e = subRect.xCenter;
        var f = subRect.yCenter;
        // Matrix to do X,Y translation of sub rect within parent rect
        // "translateMatrix"
        // [1.0, 0.0, 0.0, e   ]
        // [0.0, 1.0, 0.0, f   ]
        // [0.0, 0.0, 1.0, 0.0]
        // [0.0, 0.0, 0.0, 1.0]
        var g = 1.0 / rectWidth;
        var h = 1.0 / rectHeight;
        // Matrix to scale X,Y,Z to [0.0, 1.0] range "postScaleMatrix"
        // [g,    0.0, 0.0, 0.0]
        // [0.0, h,    0.0, 0.0]
        // [0.0, 0.0,    g, 0.0]
        // [0.0, 0.0, 0.0, 1.0]
        var matrix = new Array(16);
        // row 1
        matrix[0] = a * c * flip * g;
        matrix[1] = -b * d * g;
        matrix[2] = 0.0;
        matrix[3] = (-0.5 * a * c * flip + 0.5 * b * d + e) * g;
        // row 2
        matrix[4] = a * d * flip * h;
        matrix[5] = b * c * h;
        matrix[6] = 0.0;
        matrix[7] = (-0.5 * b * c - 0.5 * a * d * flip + f) * h;
        // row 3
        matrix[8] = 0.0;
        matrix[9] = 0.0;
        matrix[10] = a * g;
        matrix[11] = 0.0;
        // row 4
        matrix[12] = 0.0;
        matrix[13] = 0.0;
        matrix[14] = 0.0;
        matrix[15] = 1.0;
        return arrayToMatrix4x4(matrix);
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function getImageSize(input) {
        if (input instanceof tf__namespace.Tensor) {
            return { height: input.shape[0], width: input.shape[1] };
        }
        else {
            return { height: input.height, width: input.width };
        }
    }
    /**
     * Normalizes the provided angle to the range -pi to pi.
     * @param angle The angle in radians to be normalized.
     */
    function normalizeRadians(angle) {
        return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
    }
    /**
     * Transform value ranges.
     * @param fromMin Min of original value range.
     * @param fromMax Max of original value range.
     * @param toMin New min of transformed value range.
     * @param toMax New max of transformed value range.
     */
    function transformValueRange(fromMin, fromMax, toMin, toMax) {
        var fromRange = fromMax - fromMin;
        var toRange = toMax - toMin;
        if (fromRange === 0) {
            throw new Error("Original min and max are both " + fromMin + ", range cannot be 0.");
        }
        var scale = toRange / fromRange;
        var offset = toMin - fromMin * scale;
        return { scale: scale, offset: offset };
    }
    /**
     * Convert an image to an image tensor representation.
     *
     * The image tensor has a shape [1, height, width, colorChannel].
     *
     * @param input An image, video frame, or image tensor.
     */
    function toImageTensor(input) {
        return input instanceof tf__namespace.Tensor ? input : tf__namespace.browser.fromPixels(input);
    }
    /**
     * Padding ratio of left, top, right, bottom, based on the output dimensions.
     *
     * The padding values are non-zero only when the "keep_aspect_ratio" is true.
     *
     * For instance, when the input image is 10x10 (width x height) and the
     * output dimensions is 20x40 and "keep_aspect_ratio" is true, we should scale
     * the input image to 20x20 and places it in the middle of the output image with
     * an equal padding of 10 pixels at the top and the bottom. The result is
     * therefore {left: 0, top: 0.25, right: 0, bottom: 0.25} (10/40 = 0.25f).
     * @param roi The original rectangle to pad.
     * @param targetSize The target width and height of the result rectangle.
     * @param keepAspectRatio Whether keep aspect ratio. Default to false.
     */
    function padRoi(roi, targetSize, keepAspectRatio) {
        if (keepAspectRatio === void 0) { keepAspectRatio = false; }
        if (!keepAspectRatio) {
            return { top: 0, left: 0, right: 0, bottom: 0 };
        }
        var targetH = targetSize.height;
        var targetW = targetSize.width;
        validateSize(targetSize, 'targetSize');
        validateSize(roi, 'roi');
        var tensorAspectRatio = targetH / targetW;
        var roiAspectRatio = roi.height / roi.width;
        var newWidth;
        var newHeight;
        var horizontalPadding = 0;
        var verticalPadding = 0;
        if (tensorAspectRatio > roiAspectRatio) {
            // pad height;
            newWidth = roi.width;
            newHeight = roi.width * tensorAspectRatio;
            verticalPadding = (1 - roiAspectRatio / tensorAspectRatio) / 2;
        }
        else {
            // pad width.
            newWidth = roi.height / tensorAspectRatio;
            newHeight = roi.height;
            horizontalPadding = (1 - tensorAspectRatio / roiAspectRatio) / 2;
        }
        roi.width = newWidth;
        roi.height = newHeight;
        return {
            top: verticalPadding,
            left: horizontalPadding,
            right: horizontalPadding,
            bottom: verticalPadding
        };
    }
    /**
     * Get the rectangle information of an image, including xCenter, yCenter, width,
     * height and rotation.
     *
     * @param imageSize imageSize is used to calculate the rectangle.
     * @param normRect Optional. If normRect is not null, it will be used to get
     *     a subarea rectangle information in the image. `imageSize` is used to
     *     calculate the actual non-normalized coordinates.
     */
    function getRoi(imageSize, normRect) {
        if (normRect) {
            return {
                xCenter: normRect.xCenter * imageSize.width,
                yCenter: normRect.yCenter * imageSize.height,
                width: normRect.width * imageSize.width,
                height: normRect.height * imageSize.height,
                rotation: normRect.rotation
            };
        }
        else {
            return {
                xCenter: 0.5 * imageSize.width,
                yCenter: 0.5 * imageSize.height,
                width: imageSize.width,
                height: imageSize.height,
                rotation: 0
            };
        }
    }
    /**
     * Generate the projective transformation matrix to be used for `tf.transform`.
     *
     * See more documentation in `tf.transform`.
     *
     * @param matrix The transformation matrix mapping subRect to rect, can be
     *     computed using `getRotatedSubRectToRectTransformMatrix` calculator.
     * @param imageSize The original image height and width.
     * @param inputResolution The target height and width.
     */
    function getProjectiveTransformMatrix(matrix, imageSize, inputResolution) {
        validateSize(inputResolution, 'inputResolution');
        // To use M with regular x, y coordinates, we need to normalize them first.
        // Because x' = a0 * x + a1 * y + a2, y' = b0 * x + b1 * y + b2,
        // we need to use factor (1/inputResolution.width) to normalize x for a0 and
        // b0, similarly we need to use factor (1/inputResolution.height) to normalize
        // y for a1 and b1.
        // Also at the end, we need to de-normalize x' and y' to regular coordinates.
        // So we need to use factor imageSize.width for a0, a1 and a2, similarly
        // we need to use factor imageSize.height for b0, b1 and b2.
        var a0 = (1 / inputResolution.width) * matrix[0][0] * imageSize.width;
        var a1 = (1 / inputResolution.height) * matrix[0][1] * imageSize.width;
        var a2 = matrix[0][3] * imageSize.width;
        var b0 = (1 / inputResolution.width) * matrix[1][0] * imageSize.height;
        var b1 = (1 / inputResolution.height) * matrix[1][1] * imageSize.height;
        var b2 = matrix[1][3] * imageSize.height;
        return [a0, a1, a2, b0, b1, b2, 0, 0];
    }
    function validateSize(size, name) {
        tf__namespace.util.assert(size.width !== 0, function () { return name + " width cannot be 0."; });
        tf__namespace.util.assert(size.height !== 0, function () { return name + " height cannot be 0."; });
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function shiftImageValue(image, outputFloatRange) {
        // Calculate the scale and offset to shift from [0, 255] to [-1, 1].
        var valueRange = transformValueRange(0, 255, outputFloatRange[0] /* min */, outputFloatRange[1] /* max */);
        // Shift value range.
        return tf__namespace.tidy(function () { return tf__namespace.add(tf__namespace.mul(image, valueRange.scale), valueRange.offset); });
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Convert an image or part of it to an image tensor.
     *
     * @param image An image, video frame or image tensor.
     * @param config
     *      inputResolution: The target height and width.
     *      keepAspectRatio?: Whether target tensor should keep aspect ratio.
     * @param normRect A normalized rectangle, representing the subarea to crop from
     *      the image. If normRect is provided, the returned image tensor represents
     *      the subarea.
     * @returns A map with the following properties:
     *     - imageTensor
     *     - padding: Padding ratio of left, top, right, bottom, based on the output
     * dimensions.
     *     - transformationMatrix: Projective transform matrix used to transform
     * input image to transformed image.
     */
    function convertImageToTensor(image, config, normRect) {
        var outputTensorSize = config.outputTensorSize, keepAspectRatio = config.keepAspectRatio, borderMode = config.borderMode, outputTensorFloatRange = config.outputTensorFloatRange;
        // Ref:
        // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/tensor/image_to_tensor_calculator.cc
        var imageSize = getImageSize(image);
        var roi = getRoi(imageSize, normRect);
        var padding = padRoi(roi, outputTensorSize, keepAspectRatio);
        var transformationMatrix = getRotatedSubRectToRectTransformMatrix(roi, imageSize.width, imageSize.height, false);
        var imageTensor = tf__namespace.tidy(function () {
            var $image = toImageTensor(image);
            var transformMatrix = tf__namespace.tensor2d(getProjectiveTransformMatrix(transformationMatrix, imageSize, outputTensorSize), [1, 8]);
            var fillMode = borderMode === 'zero' ? 'constant' : 'nearest';
            var imageTransformed = tf__namespace.image.transform(
            // tslint:disable-next-line: no-unnecessary-type-assertion
            tf__namespace.expandDims(tf__namespace.cast($image, 'float32')), transformMatrix, 'bilinear', fillMode, 0, [outputTensorSize.height, outputTensorSize.width]);
            var imageShifted = outputTensorFloatRange != null ?
                shiftImageValue(imageTransformed, outputTensorFloatRange) :
                imageTransformed;
            return imageShifted;
        });
        return { imageTensor: imageTensor, padding: padding, transformationMatrix: transformationMatrix };
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // ref:
    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/detections_to_rects_calculator.cc
    function computeRotation(detection, imageSize, config) {
        var locationData = detection.locationData;
        var startKeypoint = config.rotationVectorStartKeypointIndex;
        var endKeypoint = config.rotationVectorEndKeypointIndex;
        var targetAngle;
        if (config.rotationVectorTargetAngle) {
            targetAngle = config.rotationVectorTargetAngle;
        }
        else {
            targetAngle = Math.PI * config.rotationVectorTargetAngleDegree / 180;
        }
        var x0 = locationData.relativeKeypoints[startKeypoint].x * imageSize.width;
        var y0 = locationData.relativeKeypoints[startKeypoint].y * imageSize.height;
        var x1 = locationData.relativeKeypoints[endKeypoint].x * imageSize.width;
        var y1 = locationData.relativeKeypoints[endKeypoint].y * imageSize.height;
        var rotation = normalizeRadians(targetAngle - Math.atan2(-(y1 - y0), x1 - x0));
        return rotation;
    }
    function rectFromBox(box) {
        return {
            xCenter: box.xMin + box.width / 2,
            yCenter: box.yMin + box.height / 2,
            width: box.width,
            height: box.height,
        };
    }
    function normRectFromKeypoints(locationData) {
        var keypoints = locationData.relativeKeypoints;
        if (keypoints.length <= 1) {
            throw new Error('2 or more keypoints required to calculate a rect.');
        }
        var xMin = Number.MAX_VALUE, yMin = Number.MAX_VALUE, xMax = Number.MIN_VALUE, yMax = Number.MIN_VALUE;
        keypoints.forEach(function (keypoint) {
            xMin = Math.min(xMin, keypoint.x);
            xMax = Math.max(xMax, keypoint.x);
            yMin = Math.min(yMin, keypoint.y);
            yMax = Math.max(yMax, keypoint.y);
        });
        return {
            xCenter: (xMin + xMax) / 2,
            yCenter: (yMin + yMax) / 2,
            width: xMax - xMin,
            height: yMax - yMin
        };
    }
    function detectionToNormalizedRect(detection, conversionMode) {
        var locationData = detection.locationData;
        return conversionMode === 'boundingbox' ?
            rectFromBox(locationData.relativeBoundingBox) :
            normRectFromKeypoints(locationData);
    }
    function detectionToRect(detection, conversionMode, imageSize) {
        var locationData = detection.locationData;
        var rect;
        if (conversionMode === 'boundingbox') {
            rect = rectFromBox(locationData.boundingBox);
        }
        else {
            rect = normRectFromKeypoints(locationData);
            var width = imageSize.width, height = imageSize.height;
            rect.xCenter = Math.round(rect.xCenter * width);
            rect.yCenter = Math.round(rect.yCenter * height);
            rect.width = Math.round(rect.width * width);
            rect.height = Math.round(rect.height * height);
        }
        return rect;
    }
    // ref:
    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/detections_to_rects_calculator.cc
    function calculateDetectionsToRects(detection, conversionMode, outputType, imageSize, rotationConfig) {
        var rect = outputType === 'rect' ?
            detectionToRect(detection, conversionMode, imageSize) :
            detectionToNormalizedRect(detection, conversionMode);
        if (rotationConfig) {
            rect.rotation = computeRotation(detection, imageSize, rotationConfig);
        }
        return rect;
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function getNumberOfRefinedLandmarks(refinements) {
        // Gather all used indexes.
        var indices = [].concat.apply([], refinements.map(function (refinement) { return refinement.indexesMapping; }));
        if (indices.length === 0) {
            throw new Error('There should be at least one landmark in indexes mapping');
        }
        var minIndex = indices[0], maxIndex = indices[0];
        var uniqueIndices = new Set(indices);
        uniqueIndices.forEach(function (index) {
            minIndex = Math.min(minIndex, index);
            maxIndex = Math.max(maxIndex, index);
        });
        // Check that indxes start with 0 and there is no gaps between min and max
        // indexes.
        var numIndices = uniqueIndices.size;
        if (minIndex !== 0) {
            throw new Error("Indexes are expected to start with 0 instead of " + minIndex);
        }
        if (maxIndex + 1 !== numIndices) {
            throw new Error("Indexes should have no gaps but " + (maxIndex - numIndices + 1) + " indexes are missing");
        }
        return numIndices;
    }
    function refineXY(indexesMapping, landmarks, refinedLandmarks) {
        for (var i = 0; i < landmarks.length; ++i) {
            var landmark = landmarks[i];
            var refinedLandmark = refinedLandmarks[indexesMapping[i]];
            refinedLandmark.x = landmark.x;
            refinedLandmark.y = landmark.y;
        }
    }
    function getZAverage(landmarks, indexes) {
        var zSum = 0;
        for (var i = 0; i < indexes.length; ++i) {
            zSum += landmarks[indexes[i]].z;
        }
        return zSum / indexes.length;
    }
    function refineZ(indexesMapping, zRefinement, landmarks, refinedLandmarks) {
        if (typeof zRefinement === 'string') {
            switch (zRefinement) {
                case 'copy': {
                    for (var i = 0; i < landmarks.length; ++i) {
                        refinedLandmarks[indexesMapping[i]].z = landmarks[i].z;
                    }
                    break;
                }
            }
        }
        else {
            var zAverage = getZAverage(refinedLandmarks, zRefinement);
            for (var i = 0; i < indexesMapping.length; ++i) {
                refinedLandmarks[indexesMapping[i]].z = zAverage;
            }
        }
    }
    /**
     * Refine one set of landmarks with another.
     *
     * @param allLandmarks List of landmarks to use for refinement. They will be
     *     applied to the output in the provided order. Each list should be non
     *     empty and contain the same amount of landmarks as indexes in mapping.
     * @param refinements Refinement instructions for input landmarks.
     *
     * @returns A list of refined landmarks.
     */
    // ref:
    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/landmarks_refinement_calculator.cc
    function landmarksRefinement(allLandmarks, refinements) {
        // Initialize refined landmarks list.
        var numRefinedLandmarks = getNumberOfRefinedLandmarks(refinements);
        var refinedLandmarks = new Array(numRefinedLandmarks).fill(null).map(Object);
        // Apply input landmarks to output refined landmarks in provided order.
        for (var i = 0; i < allLandmarks.length; ++i) {
            var landmarks = allLandmarks[i];
            var refinement = refinements[i];
            if (landmarks.length !== refinement.indexesMapping.length) {
                // Check number of landmarks in mapping and stream are the same.
                throw new Error("There are " + landmarks.length + " refinement landmarks while mapping has " + refinement.indexesMapping.length);
            }
            // Refine X and Y.
            refineXY(refinement.indexesMapping, landmarks, refinedLandmarks);
            // Refine Z.
            refineZ(refinement.indexesMapping, refinement.zRefinement, landmarks, refinedLandmarks);
            // Visibility and presence are not currently refined and are left as `0`.
        }
        return refinedLandmarks;
    }

    function normalizedKeypointsToKeypoints(normalizedKeypoints, imageSize) {
        return normalizedKeypoints.map(function (normalizedKeypoint) {
            var keypoint = __assign(__assign({}, normalizedKeypoint), { x: normalizedKeypoint.x * imageSize.width, y: normalizedKeypoint.y * imageSize.height });
            if (normalizedKeypoint.z != null) {
                // Scale z the same way as x (using image width).
                keypoint.z = normalizedKeypoint.z * imageSize.width;
            }
            return keypoint;
        });
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sigmoid(value) {
        return 1 / (1 + Math.exp(-value));
    }

    function applyActivation(activation, value) {
        return activation === 'none' ? value : sigmoid(value);
    }
    /**
     * A calculator for converting Tensors from regression models into landmarks.
     * Note that if the landmarks in the tensor has more than 5 dimensions, only the
     * first 5 dimensions will be converted to [x,y,z, visibility, presence]. The
     * latter two fields may also stay unset if such attributes are not supported in
     * the model.
     * @param landmarkTensor List of Tensors of type float32. Only the first tensor
     * will be used. The size of the values must be (num_dimension x num_landmarks).
     * @param flipHorizontally Optional. Whether to flip landmarks horizontally or
     * not. Overrides corresponding field in config.
     * @param flipVertically Optional. Whether to flip landmarks vertically or not.
     * Overrides corresponding field in config.
     *
     * @param config
     *
     * @returns Normalized landmarks.
     */
    function tensorsToLandmarks(landmarkTensor, config, flipHorizontally, flipVertically) {
        return __awaiter(this, void 0, void 0, function () {
            var numValues, numDimensions, rawLandmarks, outputLandmarks, ld, offset, landmark, i, landmark;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        flipHorizontally = flipHorizontally || config.flipHorizontally || false;
                        flipVertically = flipVertically || config.flipVertically || false;
                        numValues = landmarkTensor.size;
                        numDimensions = numValues / config.numLandmarks;
                        return [4 /*yield*/, landmarkTensor.data()];
                    case 1:
                        rawLandmarks = _a.sent();
                        outputLandmarks = [];
                        for (ld = 0; ld < config.numLandmarks; ++ld) {
                            offset = ld * numDimensions;
                            landmark = { x: 0, y: 0 };
                            if (flipHorizontally) {
                                landmark.x = config.inputImageWidth - rawLandmarks[offset];
                            }
                            else {
                                landmark.x = rawLandmarks[offset];
                            }
                            if (numDimensions > 1) {
                                if (flipVertically) {
                                    landmark.y = config.inputImageHeight - rawLandmarks[offset + 1];
                                }
                                else {
                                    landmark.y = rawLandmarks[offset + 1];
                                }
                            }
                            if (numDimensions > 2) {
                                landmark.z = rawLandmarks[offset + 2];
                            }
                            if (numDimensions > 3) {
                                landmark.score = applyActivation(config.visibilityActivation, rawLandmarks[offset + 3]);
                            }
                            // presence is in rawLandmarks[offset + 4], we don't expose it.
                            outputLandmarks.push(landmark);
                        }
                        for (i = 0; i < outputLandmarks.length; ++i) {
                            landmark = outputLandmarks[i];
                            landmark.x = landmark.x / config.inputImageWidth;
                            landmark.y = landmark.y / config.inputImageHeight;
                            // Scale Z coordinate as X + allow additional uniform normalization.
                            landmark.z = landmark.z / config.inputImageWidth / (config.normalizeZ || 1);
                        }
                        return [2 /*return*/, outputLandmarks];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Performs geometric transformation to the input normalized rectangle,
     * correpsonding to input normalized rectangle respectively.
     * @param rect The normalized rectangle.
     * @param imageSize The original imageSize.
     * @param config See documentation in `RectTransformationConfig`.
     */
    // ref:
    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/rect_transformation_calculator.cc
    function transformNormalizedRect(rect, imageSize, config) {
        var width = rect.width;
        var height = rect.height;
        var rotation = rect.rotation;
        if (config.rotation != null || config.rotationDegree != null) {
            rotation = computeNewRotation(rotation, config);
        }
        if (rotation === 0) {
            rect.xCenter = rect.xCenter + width * config.shiftX;
            rect.yCenter = rect.yCenter + height * config.shiftY;
        }
        else {
            var xShift = (imageSize.width * width * config.shiftX * Math.cos(rotation) -
                imageSize.height * height * config.shiftY * Math.sin(rotation)) /
                imageSize.width;
            var yShift = (imageSize.width * width * config.shiftX * Math.sin(rotation) +
                imageSize.height * height * config.shiftY * Math.cos(rotation)) /
                imageSize.height;
            rect.xCenter = rect.xCenter + xShift;
            rect.yCenter = rect.yCenter + yShift;
        }
        if (config.squareLong) {
            var longSide = Math.max(width * imageSize.width, height * imageSize.height);
            width = longSide / imageSize.width;
            height = longSide / imageSize.height;
        }
        else if (config.squareShort) {
            var shortSide = Math.min(width * imageSize.width, height * imageSize.height);
            width = shortSide / imageSize.width;
            height = shortSide / imageSize.height;
        }
        rect.width = width * config.scaleX;
        rect.height = height * config.scaleY;
        return rect;
    }
    function computeNewRotation(rotation, config) {
        if (config.rotation != null) {
            rotation += config.rotation;
        }
        else if (config.rotationDegree != null) {
            rotation += Math.PI * config.rotationDegree / 180;
        }
        return normalizeRadians(rotation);
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    var DEFAULT_LANDMARK_MODEL_URL = 'https://tfhub.dev/mediapipe/tfjs-model/face_landmarks_detection/face_mesh/1';
    var DEFAULT_LANDMARK_MODEL_URL_WITH_ATTENTION = 'https://tfhub.dev/mediapipe/tfjs-model/face_landmarks_detection/attention_mesh/1';
    var DEFAULT_FACE_MESH_MODEL_CONFIG = {
        runtime: 'tfjs',
        maxFaces: 1,
        refineLandmarks: false,
        // Default detectorModelUrl set by face-detection package.
        landmarkModelUrl: DEFAULT_LANDMARK_MODEL_URL
    };
    var DEFAULT_FACE_MESH_ESTIMATION_CONFIG = {
        flipHorizontal: false,
        staticImageMode: false
    };
    var RECT_TRANSFORMATION_CONFIG = {
        shiftX: 0,
        shiftY: 0,
        scaleX: 1.5,
        scaleY: 1.5,
        squareLong: true
    };
    var LANDMARK_IMAGE_TO_TENSOR_CONFIG = {
        outputTensorSize: { width: 192, height: 192 },
        outputTensorFloatRange: [0, 1],
        borderMode: 'replicate'
    };
    var FACE_PRESENCE_SCORE = 0.5;
    var MIN_SIMILARITY_THRESHOLD = 0.5;
    var TENSORS_TO_LANDMARKS_MESH_CONFIG = {
        numLandmarks: 468,
        inputImageWidth: 192,
        inputImageHeight: 192,
        visibilityActivation: 'none',
        flipHorizontally: false,
        flipVertically: false
    };
    var TENSORS_TO_LANDMARKS_LIPS_CONFIG = {
        numLandmarks: 80,
        inputImageWidth: 192,
        inputImageHeight: 192,
        visibilityActivation: 'none',
        flipHorizontally: false,
        flipVertically: false
    };
    var TENSORS_TO_LANDMARKS_EYE_CONFIG = {
        numLandmarks: 71,
        inputImageWidth: 192,
        inputImageHeight: 192,
        visibilityActivation: 'none',
        flipHorizontally: false,
        flipVertically: false
    };
    var TENSORS_TO_LANDMARKS_IRIS_CONFIG = {
        numLandmarks: 5,
        inputImageWidth: 192,
        inputImageHeight: 192,
        visibilityActivation: 'none',
        flipHorizontally: false,
        flipVertically: false
    };
    var LANDMARKS_REFINEMENT_MESH_CONFIG = {
        indexesMapping: Array.from(Array(468).keys()),
        zRefinement: 'copy'
    };
    var LANDMARKS_REFINEMENT_LIPS_CONFIG = {
        indexesMapping: [
            // Lower outer.
            61, 146, 91, 181, 84, 17, 314, 405, 321, 375, 291,
            // Upper outer(excluding corners).
            185, 40, 39, 37, 0, 267, 269, 270, 409,
            // Lower inner.
            78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308,
            // Upper inner(excluding corners).
            191, 80, 81, 82, 13, 312, 311, 310, 415,
            // Lower semi - outer.
            76, 77, 90, 180, 85, 16, 315, 404, 320, 307, 306,
            // Upper semi - outer(excluding corners).
            184, 74, 73, 72, 11, 302, 303, 304, 408,
            // Lower semi - inner.
            62, 96, 89, 179, 86, 15, 316, 403, 319, 325, 292,
            // Upper semi - inner(excluding corners).
            183, 42, 41, 38, 12, 268, 271, 272, 407
        ],
        zRefinement: 'none'
    };
    var LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG = {
        indexesMapping: [
            // Lower contour.
            33, 7, 163, 144, 145, 153, 154, 155, 133,
            // upper contour (excluding corners).
            246, 161, 160, 159, 158, 157, 173,
            // Halo x2 lower contour.
            130, 25, 110, 24, 23, 22, 26, 112, 243,
            // Halo x2 upper contour (excluding corners).
            247, 30, 29, 27, 28, 56, 190,
            // Halo x3 lower contour.
            226, 31, 228, 229, 230, 231, 232, 233, 244,
            // Halo x3 upper contour (excluding corners).
            113, 225, 224, 223, 222, 221, 189,
            // Halo x4 upper contour (no lower because of mesh structure) or
            // eyebrow inner contour.
            35, 124, 46, 53, 52, 65,
            // Halo x5 lower contour.
            143, 111, 117, 118, 119, 120, 121, 128, 245,
            // Halo x5 upper contour (excluding corners) or eyebrow outer contour.
            156, 70, 63, 105, 66, 107, 55, 193
        ],
        zRefinement: 'none'
    };
    var LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG = {
        indexesMapping: [
            // Lower contour.
            263, 249, 390, 373, 374, 380, 381, 382, 362,
            // Upper contour (excluding corners).
            466, 388, 387, 386, 385, 384, 398,
            // Halo x2 lower contour.
            359, 255, 339, 254, 253, 252, 256, 341, 463,
            // Halo x2 upper contour (excluding corners).
            467, 260, 259, 257, 258, 286, 414,
            // Halo x3 lower contour.
            446, 261, 448, 449, 450, 451, 452, 453, 464,
            // Halo x3 upper contour (excluding corners).
            342, 445, 444, 443, 442, 441, 413,
            // Halo x4 upper contour (no lower because of mesh structure) or
            // eyebrow inner contour.
            265, 353, 276, 283, 282, 295,
            // Halo x5 lower contour.
            372, 340, 346, 347, 348, 349, 350, 357, 465,
            // Halo x5 upper contour (excluding corners) or eyebrow outer contour.
            383, 300, 293, 334, 296, 336, 285, 417
        ],
        zRefinement: 'none'
    };
    var LANDMARKS_REFINEMENT_LEFT_IRIS_CONFIG = {
        indexesMapping: [
            // Center.
            468,
            // Iris right edge.
            469,
            // Iris top edge.
            470,
            // Iris left edge.
            471,
            // Iris bottom edge.
            472
        ],
        zRefinement: [
            // Lower contour.
            33, 7, 163, 144, 145, 153, 154, 155, 133,
            // Upper contour (excluding corners).
            246, 161, 160, 159, 158, 157, 173
        ]
    };
    var LANDMARKS_REFINEMENT_RIGHT_IRIS_CONFIG = {
        indexesMapping: [
            // Center.
            473,
            // Iris right edge.
            474,
            // Iris top edge.
            475,
            // Iris left edge.
            476,
            // Iris bottom edge.
            477
        ],
        zRefinement: [
            // Lower contour.
            263, 249, 390, 373, 374, 380, 381, 382, 362,
            // Upper contour (excluding corners).
            466, 388, 387, 386, 385, 384, 398
        ]
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function validateModelConfig(modelConfig) {
        if (modelConfig == null) {
            return __assign({}, DEFAULT_FACE_MESH_MODEL_CONFIG);
        }
        var config = __assign({}, modelConfig);
        config.runtime = 'tfjs';
        if (config.maxFaces == null) {
            config.maxFaces = DEFAULT_FACE_MESH_MODEL_CONFIG.maxFaces;
        }
        if (config.refineLandmarks == null) {
            config.refineLandmarks = DEFAULT_FACE_MESH_MODEL_CONFIG.refineLandmarks;
        }
        // Default detectorModelUrl set by face-detection package.
        if (config.landmarkModelUrl == null) {
            config.landmarkModelUrl = config.refineLandmarks ?
                DEFAULT_LANDMARK_MODEL_URL_WITH_ATTENTION :
                DEFAULT_LANDMARK_MODEL_URL;
        }
        return config;
    }
    function validateEstimationConfig(estimationConfig) {
        if (estimationConfig == null) {
            return __assign({}, DEFAULT_FACE_MESH_ESTIMATION_CONFIG);
        }
        var config = __assign({}, estimationConfig);
        if (config.flipHorizontal == null) {
            config.flipHorizontal = DEFAULT_FACE_MESH_ESTIMATION_CONFIG.flipHorizontal;
        }
        if (config.staticImageMode == null) {
            config.staticImageMode =
                DEFAULT_FACE_MESH_ESTIMATION_CONFIG.staticImageMode;
        }
        return config;
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * MediaPipFaceMesh class.
     */
    var MediaPipeFaceMeshTfjsLandmarksDetector = /** @class */ (function () {
        function MediaPipeFaceMeshTfjsLandmarksDetector(detector, landmarkModel, maxFaces, withAttention) {
            this.detector = detector;
            this.landmarkModel = landmarkModel;
            this.maxFaces = maxFaces;
            this.withAttention = withAttention;
            // Store global states.
            this.prevFaceRectsFromLandmarks = null;
        }
        /**
         * Estimates faces for an image or video frame.
         *
         * It returns a single face or multiple faces based on the maxFaces
         * parameter from the `config`.
         *
         * @param image
         * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement The input
         * image to feed through the network.
         *
         * @param estimationConfig Optional. See
         *     `MediaPipeFaceMeshTfjsEstimationConfig` documentation for detail.
         *
         * @return An array of `Face`s.
         */
        // TF.js implementation of the mediapipe face landmark pipeline.
        // ref graph:
        // https://github.com/google/mediapipe/blob/master/mediapipe/mediapipe/modules/face_landmark/face_landmark_front_cpu.pbtxt
        MediaPipeFaceMeshTfjsLandmarksDetector.prototype.estimateFaces = function (image, estimationConfig) {
            return __awaiter(this, void 0, void 0, function () {
                var config, imageSize, image3d, prevFaceRectsFromLandmarks, faceRectsFromDetections, allFaceDetections, faceDetections, faceRects, faceLandmarks, faces, i, landmarks, keypoints, detection;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = validateEstimationConfig(estimationConfig);
                            if (image == null) {
                                this.reset();
                                return [2 /*return*/, []];
                            }
                            imageSize = getImageSize(image);
                            image3d = tf__namespace.tidy(function () {
                                var imageTensor = tf__namespace.cast(toImageTensor(image), 'float32');
                                if (config.flipHorizontal) {
                                    var batchAxis = 0;
                                    imageTensor = tf__namespace.squeeze(tf__namespace.image.flipLeftRight(
                                    // tslint:disable-next-line: no-unnecessary-type-assertion
                                    tf__namespace.expandDims(imageTensor, batchAxis)), [batchAxis]);
                                }
                                return imageTensor;
                            });
                            prevFaceRectsFromLandmarks = this.prevFaceRectsFromLandmarks;
                            if (!(config.staticImageMode || prevFaceRectsFromLandmarks == null ||
                                prevFaceRectsFromLandmarks.length < this.maxFaces)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.detector.detectFaces(image3d, false)];
                        case 1:
                            allFaceDetections = _a.sent();
                            if (allFaceDetections.length === 0) {
                                this.reset();
                                image3d.dispose();
                                return [2 /*return*/, []];
                            }
                            faceDetections = allFaceDetections;
                            // FaceLandmarkFrontCpu: FaceDetectionFrontDetectionToRoi
                            // Calculates region of interest based on face detections, so that can be
                            // used to detect landmarks.
                            faceRectsFromDetections = faceDetections.map(function (detection) {
                                return _this.faceDetectionFrontDetectionToRoi(detection, imageSize);
                            });
                            return [3 /*break*/, 3];
                        case 2:
                            faceRectsFromDetections = [];
                            _a.label = 3;
                        case 3:
                            faceRects = calculateAssociationNormRect([faceRectsFromDetections, prevFaceRectsFromLandmarks || []], MIN_SIMILARITY_THRESHOLD);
                            return [4 /*yield*/, Promise.all(faceRects.map(function (faceRect) { return _this.faceLandmark(faceRect, image3d); }))];
                        case 4:
                            faceLandmarks = _a.sent();
                            faces = [];
                            this.prevFaceRectsFromLandmarks = [];
                            for (i = 0; i < faceLandmarks.length; ++i) {
                                landmarks = faceLandmarks[i];
                                if (landmarks == null) {
                                    continue;
                                }
                                this.prevFaceRectsFromLandmarks.push(this.faceLandmarksToRoi(landmarks, imageSize));
                                keypoints = normalizedKeypointsToKeypoints(landmarks, imageSize);
                                // Add keypoint name.
                                if (keypoints != null) {
                                    keypoints.forEach(function (keypoint, i) {
                                        var name = MEDIAPIPE_FACE_MESH_KEYPOINTS.get(i);
                                        if (name != null) {
                                            keypoint.name = name;
                                        }
                                    });
                                }
                                detection = landmarksToDetection(keypoints);
                                faces.push({ keypoints: keypoints, box: detection.locationData.relativeBoundingBox });
                            }
                            image3d.dispose();
                            return [2 /*return*/, faces];
                    }
                });
            });
        };
        MediaPipeFaceMeshTfjsLandmarksDetector.prototype.dispose = function () {
            this.detector.dispose();
            this.landmarkModel.dispose();
        };
        MediaPipeFaceMeshTfjsLandmarksDetector.prototype.reset = function () {
            this.detector.reset();
            this.prevFaceRectsFromLandmarks = null;
        };
        // calculates face ROI from face detection.
        // Subgraph: FaceDetectionFrontDetectionToRoi.
        // ref:
        // https://github.com/google/mediapipe/blob/master/mediapipe/modules/face_landmark/face_detection_front_detection_to_roi.pbtxt
        MediaPipeFaceMeshTfjsLandmarksDetector.prototype.faceDetectionFrontDetectionToRoi = function (detection, imageSize) {
            // Converts results of face detection into a rectangle (normalized by
            // image size) that encloses the face and is rotated such that the line
            // connecting left eye and right eye is aligned with the X-axis of the
            // rectangle.
            // FaceDetectionFrontDetectionToRoi: DetectionsToRectsCalculator.
            var rawRoi = calculateDetectionsToRects(detection, 'boundingbox', 'normRect', imageSize, {
                rotationVectorStartKeypointIndex: 0,
                rotationVectorEndKeypointIndex: 1,
                rotationVectorTargetAngleDegree: 0
            });
            // Expands and shifts the rectangle that contains the face so that it's
            // likely to cover the entire face.
            // FaceDetectionFrontDetectionToRoi: RectTransformationCalculation.
            var roi = transformNormalizedRect(rawRoi, imageSize, RECT_TRANSFORMATION_CONFIG);
            return roi;
        };
        // Predict face landmarks.
        // subgraph: FaceLandmarkCpu
        // ref:
        // https://github.com/google/mediapipe/blob/master/mediapipe/modules/face_landmark/face_landmark_cpu.pbtxt
        MediaPipeFaceMeshTfjsLandmarksDetector.prototype.faceLandmark = function (roi, image) {
            return __awaiter(this, void 0, void 0, function () {
                var inputTensors, outputs, outputTensors, faceFlagTensor, landmarkTensors, facePresenceScore, landmarks, _a, faceLandmarks;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            inputTensors = convertImageToTensor(image, LANDMARK_IMAGE_TO_TENSOR_CONFIG, roi).imageTensor;
                            outputs = ['output_faceflag'].concat(this.withAttention ?
                                [
                                    'output_mesh_identity', 'output_lips', 'Identity_6:0',
                                    'Identity_1:0', 'Identity_2:0', 'Identity_5:0'
                                ] :
                                ['output_mesh']);
                            outputTensors = this.landmarkModel.execute(inputTensors, outputs);
                            faceFlagTensor = outputTensors[0], landmarkTensors = outputTensors.slice(1);
                            return [4 /*yield*/, faceFlagTensor.data()];
                        case 1:
                            facePresenceScore = (_b.sent())[0];
                            // Applies a threshold to the confidence score to determine whether a face
                            // is present.
                            if (facePresenceScore < FACE_PRESENCE_SCORE) {
                                tf__namespace.dispose(outputTensors);
                                tf__namespace.dispose(inputTensors);
                                return [2 /*return*/, null];
                            }
                            if (!this.withAttention) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.tensorsToFaceLandmarksWithAttention(landmarkTensors)];
                        case 2:
                            _a = _b.sent();
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.tensorsToFaceLandmarks(landmarkTensors)];
                        case 4:
                            _a = _b.sent();
                            _b.label = 5;
                        case 5:
                            landmarks = _a;
                            faceLandmarks = calculateLandmarkProjection(landmarks, roi);
                            tf__namespace.dispose(outputTensors);
                            tf__namespace.dispose(inputTensors);
                            return [2 /*return*/, faceLandmarks];
                    }
                });
            });
        };
        // Transform single tensor into 468 facial landmarks.
        // subgraph: TensorsToFaceLandmarks
        // ref:
        // https://github.com/google/mediapipe/blob/master/mediapipe/modules/face_landmark/tensors_to_face_landmarks.pbtxt
        MediaPipeFaceMeshTfjsLandmarksDetector.prototype.tensorsToFaceLandmarks = function (landmarkTensors) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, tensorsToLandmarks(landmarkTensors[0], TENSORS_TO_LANDMARKS_MESH_CONFIG)];
                });
            });
        };
        // Transform model output tensors into 478 facial landmarks with refined
        // lips, eyes and irises.
        // subgraph: TensorsToFaceLandmarks
        // ref:
        // https://github.com/google/mediapipe/blob/master/mediapipe/modules/face_landmark/tensors_to_face_landmarks_with_attention.pbtxt
        MediaPipeFaceMeshTfjsLandmarksDetector.prototype.tensorsToFaceLandmarksWithAttention = function (landmarkTensors) {
            return __awaiter(this, void 0, void 0, function () {
                var meshLandmarks, lipsLandmarks, leftEyeLandmarks, rightEyeLandmarks, leftIrisLandmarks, rightIrisLandmarks;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, tensorsToLandmarks(landmarkTensors[0], TENSORS_TO_LANDMARKS_MESH_CONFIG)];
                        case 1:
                            meshLandmarks = _a.sent();
                            return [4 /*yield*/, tensorsToLandmarks(landmarkTensors[1], TENSORS_TO_LANDMARKS_LIPS_CONFIG)];
                        case 2:
                            lipsLandmarks = _a.sent();
                            return [4 /*yield*/, tensorsToLandmarks(landmarkTensors[3], TENSORS_TO_LANDMARKS_EYE_CONFIG)];
                        case 3:
                            leftEyeLandmarks = _a.sent();
                            return [4 /*yield*/, tensorsToLandmarks(landmarkTensors[5], TENSORS_TO_LANDMARKS_EYE_CONFIG)];
                        case 4:
                            rightEyeLandmarks = _a.sent();
                            return [4 /*yield*/, tensorsToLandmarks(landmarkTensors[4], TENSORS_TO_LANDMARKS_IRIS_CONFIG)];
                        case 5:
                            leftIrisLandmarks = _a.sent();
                            return [4 /*yield*/, tensorsToLandmarks(landmarkTensors[2], TENSORS_TO_LANDMARKS_IRIS_CONFIG)];
                        case 6:
                            rightIrisLandmarks = _a.sent();
                            return [2 /*return*/, landmarksRefinement([
                                    meshLandmarks, lipsLandmarks, leftEyeLandmarks, rightEyeLandmarks,
                                    leftIrisLandmarks, rightIrisLandmarks
                                ], [
                                    LANDMARKS_REFINEMENT_MESH_CONFIG,
                                    LANDMARKS_REFINEMENT_LIPS_CONFIG,
                                    LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG,
                                    LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG,
                                    LANDMARKS_REFINEMENT_LEFT_IRIS_CONFIG,
                                    LANDMARKS_REFINEMENT_RIGHT_IRIS_CONFIG
                                ])];
                    }
                });
            });
        };
        // Calculate face region of interest (ROI) from detections.
        // subgraph: FaceLandmarkLandmarksToRoi
        // ref:
        // https://github.com/google/mediapipe/blob/master/mediapipe/modules/face_landmark/face_landmark_landmarks_to_roi.pbtxt
        MediaPipeFaceMeshTfjsLandmarksDetector.prototype.faceLandmarksToRoi = function (landmarks, imageSize) {
            // Converts face landmarks to a detection that tightly encloses all
            // landmarks.
            // FaceLandmarkLandmarksToRoi: LandmarksToDetectionCalculator.
            var faceDetection = landmarksToDetection(landmarks);
            // Converts the face detection into a rectangle (normalized by image size)
            // that encloses the face and is rotated such that the line connecting
            // left side of the left eye and right side of the right eye is aligned
            // with the X-axis of the rectangle.
            // FaceLandmarkLandmarksToRoi: DetectionsToRectsCalculator
            var faceRectFromLandmarks = calculateDetectionsToRects(faceDetection, 'boundingbox', 'normRect', imageSize, {
                rotationVectorStartKeypointIndex: 33,
                rotationVectorEndKeypointIndex: 263,
                rotationVectorTargetAngleDegree: 0
            });
            // Expands the face rectangle so that in the next video image it's likely
            // to still contain the face even with some motion.
            // FaceLandmarkLandmarksToRoi: RectTransformationCalculator.
            // TODO: `squareLong` in the config should be set to false in MediaPipe code
            // but is not due to a bug in their processing. Once fixed on their end,
            // split RECT_TRANSFORMATION_CONFIG into separate detector and landmark
            // configs, with landmark's config's `squareLong` set to false.
            var roi = transformNormalizedRect(faceRectFromLandmarks, imageSize, RECT_TRANSFORMATION_CONFIG);
            return roi;
        };
        return MediaPipeFaceMeshTfjsLandmarksDetector;
    }());
    /**
     * Loads the MediaPipeFaceMesh model.
     *
     * @param modelConfig ModelConfig object that contains parameters for
     * the MediaPipeFaceMesh loading process. Please find more details of each
     * parameters in the documentation of the `MediaPipeFaceMeshTfjsModelConfig`
     * interface.
     */
    function load(modelConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var config, landmarkFromTFHub, landmarkModel, detector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = validateModelConfig(modelConfig);
                        landmarkFromTFHub = typeof config.landmarkModelUrl === 'string' &&
                            (config.landmarkModelUrl.indexOf('https://tfhub.dev') > -1);
                        return [4 /*yield*/, tfconv__namespace.loadGraphModel(config.landmarkModelUrl, { fromTFHub: landmarkFromTFHub })];
                    case 1:
                        landmarkModel = _a.sent();
                        return [4 /*yield*/, te(Q.MediaPipeFaceDetector, {
                                modelType: 'short',
                                maxFaces: config.maxFaces,
                                detectorModelUrl: config.detectorModelUrl,
                                runtime: config.runtime
                            })];
                    case 2:
                        detector = _a.sent();
                        return [2 /*return*/, new MediaPipeFaceMeshTfjsLandmarksDetector(detector, landmarkModel, config.maxFaces, config.refineLandmarks)];
                }
            });
        });
    }

    exports.SupportedModels = void 0;
    (function (SupportedModels) {
        SupportedModels["MediaPipeFaceMesh"] = "MediaPipeFaceMesh";
    })(exports.SupportedModels || (exports.SupportedModels = {}));

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Create a face detector instance.
     *
     * @param model The name of the pipeline to load.
     * @param modelConfig The configuration for the pipeline to load.
     */
    function createDetector(model, modelConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var config, runtime;
            return __generator(this, function (_a) {
                switch (model) {
                    case exports.SupportedModels.MediaPipeFaceMesh:
                        config = modelConfig;
                        runtime = void 0;
                        if (config != null) {
                            if (config.runtime === 'tfjs') {
                                return [2 /*return*/, load(config)];
                            }
                            if (config.runtime === 'mediapipe') {
                                return [2 /*return*/, load$1(config)];
                            }
                            runtime = config.runtime;
                        }
                        throw new Error("Expect modelConfig.runtime to be either 'tfjs' " +
                            ("or 'mediapipe', but got " + runtime));
                    default:
                        throw new Error(model + " is not a supported model name.");
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function getKeypointIndexByContour(model) {
        switch (model) {
            case exports.SupportedModels.MediaPipeFaceMesh:
                return MEDIAPIPE_FACE_MESH_KEYPOINTS_BY_CONTOUR;
            default:
                throw new Error("Model " + model + " is not supported.");
        }
    }
    function getAdjacentPairs(model) {
        switch (model) {
            case exports.SupportedModels.MediaPipeFaceMesh:
                return MEDIAPIPE_FACE_MESH_CONNECTED_KEYPOINTS_PAIRS;
            default:
                throw new Error("Model " + model + " is not supported.");
        }
    }

    var util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getKeypointIndexByContour: getKeypointIndexByContour,
        getAdjacentPairs: getAdjacentPairs
    });

    exports.createDetector = createDetector;
    exports.util = util;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
